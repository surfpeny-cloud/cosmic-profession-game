// –°–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã
class MultiplayerSystem {
    constructor() {
        this.socket = null;
        this.sessionId = null;
        this.players = new Map();
        this.currentSession = null;
        this.isHost = false;
        this.connectionStatus = 'disconnected';
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadMultiplayerTemplates();
    }

    setupEventListeners() {
        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-mptab]')) {
                const tab = e.target.closest('[data-mptab]').dataset.mptab;
                this.switchMultiplayerTab(tab);
            }

            if (e.target.closest('.create-session-btn')) {
                this.createSession();
            }

            if (e.target.closest('.join-session-btn')) {
                const sessionId = e.target.closest('.join-session-btn').dataset.session;
                this.joinSession(sessionId);
            }
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–µ—Å—Å–∏–∏
    async createSession() {
        const sessionData = {
            sessionId: this.generateSessionId(),
            host: window.game?.player?.telegramId || 'local_player',
            hostName: window.game?.player?.name || '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            maxPlayers: 4,
            currentPlayers: 1,
            status: 'waiting',
            gameMode: 'cooperative', // cooperative, competitive, creative
            created: new Date().toISOString(),
            settings: {
                planets: 15,
                timeLimit: 3600, // 1 —á–∞—Å
                allowHelpers: true
            }
        };

        this.currentSession = sessionData;
        this.isHost = true;
        this.sessionId = sessionData.sessionId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (window.gameDatabase) {
            await window.gameDatabase.createMultiplayerSession(sessionData);
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ "—Å–µ—Ä–≤–µ—Ä—É" (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ WebRTC –∏–ª–∏ WebSocket)
        this.connectToSession(sessionData.sessionId);

        this.updateMultiplayerUI();
        this.showNotification(`–°–µ—Å—Å–∏—è ${sessionData.sessionId} —Å–æ–∑–¥–∞–Ω–∞!`, 'success');
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
    async joinSession(sessionId) {
        this.sessionId = sessionId;
        this.isHost = false;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const session = await this.loadSession(sessionId);
        if (!session) {
            this.showNotification('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', 'error');
            return;
        }

        if (session.status !== 'waiting') {
            this.showNotification('–°–µ—Å—Å–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!', 'error');
            return;
        }

        if (session.currentPlayers >= session.maxPlayers) {
            this.showNotification('–°–µ—Å—Å–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', 'error');
            return;
        }

        this.currentSession = session;
        this.connectToSession(sessionId);

        this.updateMultiplayerUI();
        this.showNotification(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏ ${sessionId}`, 'success');
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ)
    connectToSession(sessionId) {
        this.connectionStatus = 'connecting';
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            this.connectionStatus = 'connected';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–µ–º–æ
            this.addDemoPlayers();
            
            this.updateMultiplayerUI();
            this.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
        }, 2000);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–∏–≥—Ä–æ–∫–æ–≤
    addDemoPlayers() {
        const demoPlayers = [
            {
                id: 'demo1',
                name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                profession: '–ó–≤–µ–∑–¥–Ω—ã–π –ë–∏–æ–ª–æ–≥-–≠–∫–æ–ª–æ–≥',
                avatar: 'üë®‚ÄçüöÄ',
                ready: true,
                position: 0,
                stars: 5
            },
            {
                id: 'demo2', 
                name: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –•—É–¥–æ–∂–Ω–∏–∫',
                profession: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –î–∏–∑–∞–π–Ω–µ—Ä-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä',
                avatar: 'üë©‚Äçüé®',
                ready: false,
                position: 2,
                stars: 3
            }
        ];

        demoPlayers.forEach(player => {
            this.players.set(player.id, player);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    async loadSession(sessionId) {
        return {
            sessionId: sessionId,
            host: 'demo_host',
            hostName: '–î–µ–º–æ –•–æ—Å—Ç',
            maxPlayers: 4,
            currentPlayers: 2,
            status: 'waiting',
            gameMode: 'cooperative',
            created: new Date().toISOString()
        };
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    switchMultiplayerTab(tab) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.mp-tab').forEach(t => t.classList.remove('active'));
        document.querySelector(`[data-mptab="${tab}"]`).classList.add('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.updateMultiplayerContent(tab);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    updateMultiplayerContent(tab) {
        const content = document.querySelector('.multiplayer-content');
        if (!content) return;

        switch (tab) {
            case 'lobby':
                content.innerHTML = this.generateLobbyHTML();
                break;
            case 'guilds':
                content.innerHTML = this.generateGuildsHTML();
                break;
            case 'leaderboard':
                content.innerHTML = this.generateLeaderboardHTML();
                break;
            case 'challenges':
                content.innerHTML = this.generateChallengesHTML();
                break;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ª–æ–±–±–∏
    generateLobbyHTML() {
        if (!this.currentSession) {
            return `
                <div class="no-session">
                    <div class="no-session-icon">üë•</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π</p>
                    <button class="btn btn-primary create-session-btn">
                        üöÄ –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
                    </button>
                    <div class="available-sessions">
                        <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</h4>
                        <div class="session-list">
                            ${this.generateSessionList()}
                        </div>
                    </div>
                </div>
            `;
        }

        return `
            <div class="active-session">
                <div class="session-header">
                    <h3>–°–µ—Å—Å–∏—è: ${this.currentSession.sessionId}</h3>
                    <div class="session-status ${this.currentSession.status}">
                        ${this.getStatusText(this.currentSession.status)}
                    </div>
                </div>

                <div class="players-list">
                    <h4>–ò–≥—Ä–æ–∫–∏ (${this.players.size}/${this.currentSession.maxPlayers})</h4>
                    ${Array.from(this.players.values()).map(player => `
                        <div class="player-slot ${player.ready ? 'ready' : ''}">
                            <div class="player-avatar">${player.avatar}</div>
                            <div class="player-info">
                                <div class="player-name">${player.name}</div>
                                <div class="player-profession">${player.profession}</div>
                            </div>
                            <div class="player-stats">
                                <span>‚≠ê ${player.stars}</span>
                                <span>ü™ê ${player.position}</span>
                            </div>
                            <div class="player-status">
                                ${player.ready ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'}
                            </div>
                        </div>
                    `).join('')}
                </div>

                <div class="session-controls">
                    ${this.isHost ? `
                        <button class="btn btn-success start-session-btn">
                            üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                        </button>
                        <button class="btn btn-secondary settings-btn">
                            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                    ` : `
                        <button class="btn ${this.isReady ? 'btn-secondary' : 'btn-primary'} ready-btn">
                            ${this.isReady ? '‚ùå –ù–µ –≥–æ—Ç–æ–≤' : '‚úÖ –ì–æ—Ç–æ–≤'}
                        </button>
                    `}
                    <button class="btn btn-danger leave-btn">
                        üö™ –ü–æ–∫–∏–Ω—É—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
    generateSessionList() {
        const demo
