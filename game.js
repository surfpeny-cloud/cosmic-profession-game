// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–¥ –¥–ª—è "–ü–£–¢–ï–®–ï–°–¢–í–ò–ï –ö –ü–õ–ê–ù–ï–¢–ï –ü–†–û–§–ï–°–°–ò–ô"

class SpaceProfessionGame {
    constructor() {
        this.player = {
            name: '',
            profession: '',
            skill: '',
            position: 0,
            stars: 0
        };
        
        this.gameBoard = generateGameBoard();
        this.currentTask = null;
        this.timer = null;
        this.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
        
        this.initializeEventListeners();
        this.renderGameBoard();
    }
    
    initializeEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        document.getElementById('start-game').addEventListener('click', () => {
            this.startGame();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        document.getElementById('roll-dice').addEventListener('click', () => {
            this.rollDice();
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
        document.getElementById('play-again').addEventListener('click', () => {
            this.restartGame();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('complete-task')) {
                this.completeTask(parseInt(e.target.dataset.stars));
            } else if (e.target.classList.contains('fail-task')) {
                this.failTask();
            }
        });
    }
    
    startGame() {
        const name = document.getElementById('player-name').value.trim();
        const profession = document.getElementById('profession-name').value.trim();
        const skill = document.getElementById('main-skill').value.trim();
        
        if (!name || !profession || !skill) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }
        
        this.player = {
            name,
            profession,
            skill,
            position: 0,
            stars: 0
        };
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        document.getElementById('game-setup').classList.remove('active');
        document.getElementById('game-board').classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        this.updatePlayerInfo();
        this.renderGameBoard();
    }
    
    updatePlayerInfo() {
        document.getElementById('current-player').textContent = 
            `–ò–≥—Ä–æ–∫: ${this.player.name} (${this.player.profession})`;
        document.getElementById('stars-earned').textContent = this.player.stars;
    }
    
    renderGameBoard() {
        const boardElement = document.getElementById('board');
        boardElement.innerHTML = '';
        
        this.gameBoard.forEach((planet, index) => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.innerHTML = `
                <div class="planet-number">${planet.number}</div>
                <div class="planet-type">${planet.name}</div>
                ${index === this.player.position ? '<div class="player-marker">üöÄ</div>' : ''}
            `;
            
            boardElement.appendChild(planetElement);
        });
    }
    
    rollDice() {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –±—Ä–æ—Å–∫–∞
        const rollButton = document.getElementById('roll-dice');
        rollButton.disabled = true;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        const diceElement = document.getElementById('dice');
        let rolls = 0;
        const rollInterval = setInterval(() => {
            const randomValue = Math.floor(Math.random() * 6) + 1;
            diceElement.textContent = randomValue;
            diceElement.style.animation = 'diceRoll 0.3s ease-out';
            
            rolls++;
            if (rolls >= 10) {
                clearInterval(rollInterval);
                const finalValue = Math.floor(Math.random() * 6) + 1;
                diceElement.textContent = finalValue;
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –±—Ä–æ—Å–æ–∫
                setTimeout(() => {
                    this.movePlayer(finalValue);
                    rollButton.disabled = false;
                }, 500);
            }
            
            setTimeout(() => {
                diceElement.style.animation = '';
            }, 300);
        }, 100);
    }
    
    movePlayer(steps) {
        const oldPosition = this.player.position;
        const newPosition = Math.min(oldPosition + steps, this.gameBoard.length - 1);
        
        this.player.position = newPosition;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        document.getElementById('move-message').textContent = 
            `–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –Ω–∞ ${steps} —à–∞–≥–æ–≤! –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞ ${this.gameBoard[newPosition].name}`;
        
        this.renderGameBoard();
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ —Ñ–∏–Ω–∏—à–∞ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥
        if (newPosition === this.gameBoard.length - 1 && this.player.stars >= 10) {
            this.showVictoryScreen();
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã
        setTimeout(() => {
            this.showPlanetTask();
        }, 1500);
    }
    
    showPlanetTask() {
        const currentPlanet = this.gameBoard[this.player.position];
        const taskElement = document.getElementById('current-task');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        taskElement.style.display = 'none';
        
        setTimeout(() => {
            let taskHTML = '';
            
            if (currentPlanet.type === 'start') {
                taskHTML = `
                    <div class="task-content">
                        <h3 class="task-title">üöÄ –ù–∞—á–∞–ª–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!</h3>
                        <p class="task-description">–í–∞—à–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º –Ω–∞ –ü–ª–∞–Ω–µ—Ç–µ –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!</p>
                    </div>
                `;
            } else if (currentPlanet.type === 'finish') {
                if (this.player.stars >= 10) {
                    this.showVictoryScreen();
                    return;
                } else {
                    taskHTML = `
                        <div class="task-content">
                            <h3 class="task-title">üéØ –ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!</h3>
                            <p class="task-description">–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –µ—â–µ ${10 - this.player.stars} –∑–≤–µ–∑–¥, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å!</p>
                            <div class="task-actions">
                                <button class="btn-secondary" onclick="game.continueFromFinish()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–±–æ—Ä –∑–≤–µ–∑–¥</button>
                            </div>
                        </div>
                    `;
                }
            } else {
                switch (currentPlanet.type) {
                    case 'blue':
                        taskHTML = this.generateBluePlanetTask();
                        break;
                    case 'red':
                        taskHTML = this.generateRedPlanetTask();
                        break;
                    case 'green':
                        taskHTML = this.generateGreenPlanetTask();
                        break;
                    case 'yellow':
                        taskHTML = this.generateYellowPlanetTask();
                        break;
                }
            }
            
            taskElement.innerHTML = taskHTML;
            taskElement.style.display = 'block';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–∏–Ω–∏—Ö –ø–ª–∞–Ω–µ—Ç
            if (currentPlanet.type === 'blue') {
                this.startTaskTimer();
            }
        }, 500);
    }
    
    generateBluePlanetTask() {
        const problem = getRandomProblem();
        return `
            <div class="task-content">
                <h3 class="task-title">üîµ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞</h3>
                <p class="task-description"><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> ${problem}</p>
                <p class="task-description"><strong>–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${this.player.profession}</p>
                <p class="task-description"><strong>–ó–∞–¥–∞–Ω–∏–µ:</strong> –ü—Ä–∏–¥—É–º–∞–π, –∫–∞–∫ —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å! –û–ø–∏—à–∏ –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–π —Ä–µ—à–µ–Ω–∏–µ.</p>
                <div class="task-timer" id="task-timer">‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: 2:00</div>
                <div class="task-actions">
                    <button class="btn-primary complete-task" data-stars="1">–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ (+1‚≠ê)</button>
                    <button class="btn-primary complete-task" data-stars="2">–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (+2‚≠ê)</button>
                    <button class="btn-secondary fail-task">–ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å</button>
                </div>
            </div>
        `;
    }
    
    generateRedPlanetTask() {
        return `
            <div class="task-content">
                <h3 class="task-title">üî¥ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏</h3>
                <p class="task-description"><strong>–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${this.player.profession}</p>
                <p class="task-description"><strong>–ó–∞–¥–∞–Ω–∏–µ:</strong> –£–±–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤!</p>
                <p class="task-description">–ü—Ä–∏–≥–æ—Ç–æ–≤—å 3 —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</p>
                <ol style="text-align: left; margin: 15px 0;">
                    <li>–ö–∞–∫ —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∫–æ—Å–º–æ—Å–µ?</li>
                    <li>–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–Ω–∞ —Ä–µ—à–∞–µ—Ç?</li>
                    <li>–ü–æ—á–µ–º—É –±–µ–∑ –Ω–µ–µ –Ω–µ –æ–±–æ–π—Ç–∏—Å—å?</li>
                </ol>
                <div class="task-actions">
                    <button class="btn-primary complete-task" data-stars="3">–£–±–µ–¥–∏–ª –≤—Å–µ—Ö! (+3‚≠ê)</button>
                    <button class="btn-primary complete-task" data-stars="2">–£–±–µ–¥–∏–ª —á–∞—Å—Ç–∏—á–Ω–æ (+2‚≠ê)</button>
                    <button class="btn-secondary fail-task">–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</button>
                </div>
            </div>
        `;
    }
    
    generateGreenPlanetTask() {
        return `
            <div class="task-content">
                <h3 class="task-title">üü¢ –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º</h3>
                <p class="task-description"><strong>–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${this.player.profession}</p>
                <p class="task-description"><strong>–ó–∞–¥–∞–Ω–∏–µ:</strong> –ü–æ–º–æ–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –µ–≥–æ –∑–∞–¥–∞–Ω–∏–µ–º!</p>
                <p class="task-description">–í—ã –º–æ–∂–µ—Ç–µ:</p>
                <ul style="text-align: left; margin: 15px 0;">
                    <li>–ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –∏–¥–µ—é –¥–ª—è –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è</li>
                    <li>–ü–æ–º–æ—á—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ</li>
                    <li>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–≤–µ—Ç–æ–º –∏–ª–∏ –æ–±–æ–¥—Ä–µ–Ω–∏–µ–º</li>
                </ul>
                <div class="task-actions">
                    <button class="btn-primary complete-task" data-stars="1">–ü–æ–º–æ–≥ —É—Å–ø–µ—à–Ω–æ! (+1‚≠ê)</button>
                    <button class="btn-secondary fail-task">–ù–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å</button>
                </div>
            </div>
        `;
    }
    
    generateYellowPlanetTask() {
        const event = getRandomEvent();
        return `
            <div class="task-content">
                <h3 class="task-title">üü° –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ</h3>
                <p class="task-description"><strong>–°–æ–±—ã—Ç–∏–µ:</strong> ${event.title}</p>
                <p class="task-description">${event.description}</p>
                <div class="task-actions">
                    <button class="btn-primary complete-task" data-stars="1">–ü—Ä–∏–Ω—è—Ç—å —Å–æ–±—ã—Ç–∏–µ</button>
                </div>
            </div>
        `;
    }
    
    startTaskTimer() {
        this.timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã
        const timerElement = document.getElementById('task-timer');
        
        this.timer = setInterval(() => {
            this.timeLeft--;
            const minutes = Math.floor(this.timeLeft / 60);
            const seconds = this.timeLeft % 60;
            
            if (timerElement) {
                timerElement.textContent = `‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${minutes}:${seconds.toString().padStart(2, '0')}`;
            }
            
            if (this.timeLeft <= 0) {
                clearInterval(this.timer);
                if (timerElement) {
                    timerElement.textContent = '‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!';
                }
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å 0 –∑–≤–µ–∑–¥
                setTimeout(() => this.failTask(), 1000);
            }
        }, 1000);
    }
    
    completeTask(stars) {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
        
        this.player.stars += stars;
        this.updatePlayerInfo();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ
        const taskElement = document.getElementById('current-task');
        taskElement.innerHTML = `
            <div class="task-content">
                <h3 class="task-title">üéâ –û—Ç–ª–∏—á–Ω–æ!</h3>
                <p class="task-description">–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${stars} ‚≠ê –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!</p>
                <p class="task-description">–¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${this.player.stars} –∏–∑ 10 –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–≤–µ–∑–¥.</p>
                ${this.player.stars >= 10 ? '<p class="task-description" style="color: #ffcc5c; font-weight: bold;">üéØ –í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥! –î–æ—Å—Ç–∏–≥–∞–π—Ç–µ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å!</p>' : ''}
            </div>
        `;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ —Ñ–∏–Ω–∏—à–µ
        if (this.player.position === this.gameBoard.length - 1 && this.player.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 2000);
        }
    }
    
    failTask() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
        
        const taskElement = document.getElementById('current-task');
        taskElement.innerHTML = `
            <div class="task-content">
                <h3 class="task-title">üòî –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</h3>
                <p class="task-description">–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í –∫–æ—Å–º–æ—Å–µ –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.</p>
                <p class="task-description">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</p>
            </div>
        `;
    }
    
    continueFromFinish() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –æ–Ω –Ω–∞ —Ñ–∏–Ω–∏—à–µ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
        this.player.position = Math.max(0, this.player.position - 3);
        this.renderGameBoard();
        document.getElementById('current-task').style.display = 'none';
    }
    
    showVictoryScreen() {
        document.getElementById('game-board').classList.remove('active');
        document.getElementById('victory-screen').classList.add('active');
        
        document.getElementById('winner-name').textContent = this.player.name;
        document.getElementById('winner-profession').textContent = this.player.profession;
        document.getElementById('winner-skill').textContent = this.player.skill;
        document.getElementById('winner-stars').textContent = this.player.stars;
    }
    
    restartGame() {
        document.getElementById('victory-screen').classList.remove('active');
        document.getElementById('game-setup').classList.add('active');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById('player-name').value = '';
        document.getElementById('profession-name').value = '';
        document.getElementById('main-skill').value = '';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        this.gameBoard = generateGameBoard();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let game;

document.addEventListener('DOMContentLoaded', () => {
    game = new SpaceProfessionGame();
});
