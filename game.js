// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è
class CosmicProfessionGame {
    constructor() {
        this.currentScreen = 'loadingScreen';
        this.player = null;
        this.gameState = {
            currentPosition: -1,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null,
            currentMission: null
        };
        this.planets = [];
        this.isCreativeSolution = false;
        this.timerInterval = null;
        
        console.log('üöÄ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
        this.init();
    }

    init() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
        this.createGamePlanets();
        console.log('ü™ê –ü–ª–∞–Ω–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', this.planets.length);
        
        // –ó–∞—Ç–µ–º –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
        console.log('üîó –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram
        this.initTelegram();
        console.log('üì± Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.startLoadingAnimation();
        console.log('üîÑ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    initTelegram() {
        if (window.Telegram && Telegram.WebApp) {
            try {
                Telegram.WebApp.ready();
                Telegram.WebApp.expand();
                console.log('‚úÖ Telegram WebApp –≥–æ—Ç–æ–≤');
            } catch (error) {
                console.log('‚ÑπÔ∏è Telegram –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
            }
        }
    }

    createGamePlanets() {
        // –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.planets = [
            { id: 1, name: "–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—É—Å", type: "blue", icon: "üíé", description: "–ü–ª–∞–Ω–µ—Ç–∞ —Å–≤–µ—Ä–∫–∞—é—â–∏—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤" },
            { id: 2, name: "–†–æ–±–æ—Ç–æ–Ω–∏—è", type: "red", icon: "ü§ñ", description: "–ú–∏—Ä —Ä–æ–±–æ—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π" },
            { id: 3, name: "–§–ª–æ—Ä–∞-7", type: "green", icon: "üåø", description: "–¶–≤–µ—Ç—É—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞" },
            { id: 4, name: "–ê—Ä—Ç-–°—Ñ–µ—Ä–∞", type: "blue", icon: "üé®", description: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è" },
            { id: 5, name: "–¢–µ—Ö–Ω–æ–ú–∏—Ä", type: "yellow", icon: "‚ö°", description: "–¶–µ–Ω—Ç—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π" }
        ];
    }

    bindEvents() {
        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Å–æ–±—ã—Ç–∏–π...');
        
        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            const generateBtn = document.getElementById('generateProfession');
            const startBtn = document.getElementById('startGame');
            const rollDiceBtn = document.getElementById('rollDice');

            if (generateBtn) {
                generateBtn.addEventListener('click', () => {
                    console.log('üé≤ –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞');
                    this.generatePlayerProfession();
                });
            }

            if (startBtn) {
                startBtn.addEventListener('click', () => {
                    console.log('üöÄ –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
                    this.startGame();
                });
            }

            if (rollDiceBtn) {
                rollDiceBtn.addEventListener('click', () => {
                    console.log('üé≤ –ö–Ω–æ–ø–∫–∞ –∫—É–±–∏–∫–∞ –Ω–∞–∂–∞—Ç–∞');
                    this.rollDice();
                });
            }

            // –ó–∞–¥–∞–Ω–∏—è
            const completeMissionBtn = document.getElementById('completeMission');
            const creativeSolutionBtn = document.getElementById('creativeSolution');
            const submitSolutionBtn = document.getElementById('submitSolution');
            const cancelSolutionBtn = document.getElementById('cancelSolution');

            if (completeMissionBtn) {
                completeMissionBtn.addEventListener('click', () => {
                    this.showSolutionInput(false);
                });
            }

            if (creativeSolutionBtn) {
                creativeSolutionBtn.addEventListener('click', () => {
                    this.showSolutionInput(true);
                });
            }

            if (submitSolutionBtn) {
                submitSolutionBtn.addEventListener('click', () => {
                    this.completeMission();
                });
            }

            if (cancelSolutionBtn) {
                cancelSolutionBtn.addEventListener('click', () => {
                    this.hideSolutionInput();
                });
            }

            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
            const restartBtn = document.getElementById('restartGame');
            if (restartBtn) {
                restartBtn.addEventListener('click', () => {
                    this.restartGame();
                });
            }

            console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
        }
    }

    startLoadingAnimation() {
        console.log('üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏...');
        
        let progress = 0;
        const progressFill = document.querySelector('.progress-fill');
        const progressText = document.querySelector('.progress-text');
        
        if (!progressFill || !progressText) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            this.showScreen('characterScreen');
            return;
        }

        const interval = setInterval(() => {
            progress += 2;
            
            if (progressFill) {
                progressFill.style.width = `${progress}%`;
            }
            
            if (progressText) {
                progressText.textContent = `${progress}%`;
            }
            
            console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}%`);
            
            if (progress >= 100) {
                clearInterval(interval);
                console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                setTimeout(() => {
                    this.showScreen('characterScreen');
                }, 500);
            }
        }, 40);
    }

    generatePlayerProfession() {
        console.log('üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...');
        
        const name = document.getElementById('playerName').value.trim();
        const skill = document.getElementById('mainSkill').value;
        const interest = document.getElementById('interestArea').value;

        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { name, skill, interest });

        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞!');
            return;
        }

        if (!skill) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤—ã–∫!');
            return;
        }

        if (!interest) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!');
            return;
        }

        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const profession = {
            fullName: `${this.getRandomPrefix()} ${skill} ${interest}`,
            description: `–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ ${skill} –∏ ${interest}`,
            skill: skill,
            interest: interest
        };
        
        this.player = {
            name: name,
            profession: profession,
            skill: skill,
            interest: interest
        };

        console.log('üéì –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', profession);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultDiv = document.getElementById('professionResult');
        const professionName = document.getElementById('professionName');
        const professionDesc = document.getElementById('professionDescription');
        
        if (resultDiv && professionName && professionDesc) {
            professionName.textContent = profession.fullName;
            professionDesc.textContent = profession.description;
            resultDiv.style.display = 'block';
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
        const startBtn = document.getElementById('startGame');
        if (startBtn) {
            startBtn.disabled = false;
        }

        alert(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è "${profession.fullName}" —Å–æ–∑–¥–∞–Ω–∞!`);
    }

    getRandomPrefix() {
        const prefixes = ['–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π', '–ó–≤–µ–∑–¥–Ω—ã–π', '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π', '–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π'];
        return prefixes[Math.floor(Math.random() * prefixes.length)];
    }

    startGame() {
        if (!this.player) {
            alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!');
            return;
        }

        console.log('üéÆ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –¥–ª—è:', this.player.name);
        
        this.gameState.startTime = new Date();
        this.gameState.currentPosition = -1;
        
        this.updateGameDisplay();
        this.showScreen('gameScreen');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DOM
        setTimeout(() => {
            this.renderGameMap();
        }, 100);
        
        this.addLogMessage(`üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –°–¢–ê–†–¢! –ö–æ—Ä–∞–±–ª—å "${this.player.name}" –Ω–∞—á–∞–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!`);
        this.addLogMessage(`üéØ –í–∞—à–∞ –º–∏—Å—Å–∏—è: —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º ${this.player.profession.fullName} –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π!`);
        
        alert('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞.');
    }

    renderGameMap() {
        const container = document.getElementById('planetsContainer');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–∞–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        container.innerHTML = '';

        this.planets.forEach((planet, index) => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.innerHTML = planet.icon;
            planetElement.title = `${planet.name}\n${planet.description}`;
            
            container.appendChild(planetElement);
        });

        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–ª–∞–Ω–µ—Ç:', this.planets.length);
        this.updatePlayerPosition();
    }

    updatePlayerPosition() {
        const marker = document.getElementById('playerMarker');
        const planets = document.querySelectorAll('.planet');
        
        if (!marker) {
            console.error('‚ùå –ú–∞—Ä–∫–µ—Ä –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        if (this.gameState.currentPosition >= 0 && planets[this.gameState.currentPosition]) {
            const planetRect = planets[this.gameState.currentPosition].getBoundingClientRect();
            const containerRect = document.querySelector('.planets-container').getBoundingClientRect();
            
            const leftPosition = planetRect.left - containerRect.left + planetRect.width/2 - 20;
            const topPosition = planetRect.top - containerRect.top - 25;
            
            marker.style.left = `${leftPosition}px`;
            marker.style.top = `${topPosition}px`;
        } else {
            // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
            marker.style.left = '20px';
            marker.style.top = '50%';
        }
    }

    rollDice() {
        console.log('üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞...');

        const diceBtn = document.getElementById('rollDice');
        if (diceBtn) {
            diceBtn.disabled = true;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const diceResult = document.getElementById('diceResult');
        if (diceResult) {
            diceResult.textContent = 'üé≤';
            diceResult.style.animation = 'none';
            void diceResult.offsetWidth;
            diceResult.style.animation = 'diceRoll 0.8s ease-out';
        }

        setTimeout(() => {
            const roll = Math.floor(Math.random() * 6) + 1;
            console.log('‚úÖ –í—ã–ø–∞–ª–æ:', roll);
            
            if (diceResult) {
                diceResult.textContent = this.getDiceEmoji(roll);
            }
            
            this.movePlayer(roll);
            
            if (diceBtn) {
                setTimeout(() => {
                    diceBtn.disabled = false;
                }, 1000);
            }
            
        }, 800);
    }

    getDiceEmoji(number) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[number - 1] || 'üé≤';
    }

    movePlayer(steps) {
        this.addLogMessage(`üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞: –≤—ã–ø–∞–ª–æ ${steps}`);

        const newPosition = this.gameState.currentPosition + steps;
        const maxPosition = this.planets.length - 1;

        if (newPosition > maxPosition) {
            this.gameState.currentPosition = maxPosition;
            this.addLogMessage('üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞!');
            this.reachFinalPlanet();
        } else {
            this.gameState.currentPosition = newPosition;
            this.arriveAtPlanet();
        }

        this.renderGameMap();
        this.updateGameDisplay();
    }

    arriveAtPlanet() {
        const currentPlanet = this.planets[this.gameState.currentPosition];
        
        console.log('ü™ê –ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É:', currentPlanet);
        
        this.addLogMessage(`ü™ê –ü–†–ò–ë–´–¢–ò–ï –ù–ê –ü–õ–ê–ù–ï–¢–£: ${currentPlanet.name}`);
        this.addLogMessage(`üìñ ${currentPlanet.description}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–µ—Ç—É –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
        if (!this.gameState.visitedPlanets.includes(currentPlanet.id)) {
            this.gameState.visitedPlanets.push(currentPlanet.id);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏—è
        setTimeout(() => {
            this.showMissionScreen(currentPlanet);
        }, 1000);
    }

    showMissionScreen(planet) {
        const mission = this.generateMission(planet.type);
        this.gameState.currentMission = mission;
        
        console.log('üìã –ü–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏—è:', mission);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∑–∞–¥–∞–Ω–∏—è
        const planetIcon = document.getElementById('missionPlanetIcon');
        const planetName = document.getElementById('missionPlanetName');
        const missionText = document.getElementById('missionText');
        const missionProfession = document.getElementById('missionProfession');
        const missionTimer = document.getElementById('missionTimer');

        if (planetIcon) planetIcon.textContent = planet.icon;
        if (planetName) planetName.textContent = planet.name;
        if (missionText) missionText.textContent = mission.text;
        if (missionProfession && this.player) {
            missionProfession.textContent = this.player.profession.fullName;
        }
        if (missionTimer) missionTimer.textContent = '02:00';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const solutionInput = document.getElementById('solutionInput');
        const solutionText = document.getElementById('solutionText');
        if (solutionInput) solutionInput.style.display = 'none';
        if (solutionText) solutionText.value = '';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        this.startMissionTimer(120); // 2 –º–∏–Ω—É—Ç—ã
        this.showScreen('missionScreen');
        
        this.addLogMessage(`üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${mission.name}`);
    }

    generateMission(planetType) {
        const missions = {
            blue: [
                "–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç –∑–µ–º–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ! –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —à–µ–¥–µ–≤—Ä.",
                "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≥—Ä—É—Å—Ç—è—Ç –≤ –Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç–∏. –†–∞–∑–≤–µ—Å–µ–ª–∏—Ç–µ –∏—Ö!"
            ],
            red: [
                "–î–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.",
                "–û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –≤–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–º–æ–∂–µ—Ç –≤ –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–ª–∞–Ω–µ—Ç—ã."
            ],
            green: [
                "–ü–æ–º–æ–≥–∏—Ç–µ –¥—Ä—É–≥–æ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –∑–∞–¥–∞–Ω–∏–µ–º.",
                "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏."
            ],
            yellow: [
                "–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂—å! –í—Å–µ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å –∑–∞ —Å–º–µ–ª–æ—Å—Ç—å.",
                "–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º–∏! –û–Ω–∏ –¥–µ–ª—è—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏."
            ]
        };

        const missionList = missions[planetType] || missions.blue;
        const randomMission = missionList[Math.floor(Math.random() * missionList.length)];

        return {
            type: planetType,
            name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞',
            text: randomMission,
            time: 120
        };
    }

    startMissionTimer(seconds) {
        this.timerSeconds = seconds;
        
        this.timerInterval = setInterval(() => {
            this.timerSeconds--;
            const timerElement = document.getElementById('missionTimer');
            if (timerElement) {
                const mins = Math.floor(this.timerSeconds / 60);
                const secs = this.timerSeconds % 60;
                timerElement.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            
            if (this.timerSeconds <= 0) {
                clearInterval(this.timerInterval);
                this.timeOutMission();
            }
        }, 1000);
    }

    timeOutMission() {
        this.addLogMessage('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.');
        alert('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.');
        this.showScreen('gameScreen');
    }

    showSolutionInput(isCreative = false) {
        this.isCreativeSolution = isCreative;
        const solutionInput = document.getElementById('solutionInput');
        if (solutionInput) {
            solutionInput.style.display = 'block';
        }
        
        if (isCreative) {
            this.addLogMessage('‚ú® –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è!');
        }
    }

    hideSolutionInput() {
        const solutionInput = document.getElementById('solutionInput');
        const solutionText = document.getElementById('solutionText');
        if (solutionInput) solutionInput.style.display = 'none';
        if (solutionText) solutionText.value = '';
    }

    completeMission() {
        const solutionText = document.getElementById('solutionText');
        const solution = solutionText ? solutionText.value.trim() : '';

        if (!solution) {
            alert('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ!');
            return;
        }

        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        let starsEarned = this.isCreativeSolution ? 2 : 1;
        
        this.gameState.stars += starsEarned;

        this.addLogMessage(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${starsEarned} –∑–≤–µ–∑–¥–∞`);
        this.addLogMessage(`üìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: ${this.gameState.stars}/10`);

        alert(`–ü–æ–ª—É—á–µ–Ω–æ ${starsEarned} ‚≠ê! –í—Å–µ–≥–æ: ${this.gameState.stars}/10`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 1500);
        } else {
            setTimeout(() => this.showScreen('gameScreen'), 1000);
        }
    }

    reachFinalPlanet() {
        this.addLogMessage('üéØ –í–´ –î–û–°–¢–ò–ì–õ–ò –§–ò–ù–ê–õ–¨–ù–û–ô –ü–õ–ê–ù–ï–¢–´!');
        
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 2000);
        } else {
            this.addLogMessage('‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–±–µ–¥—ã!');
            alert('–°–æ–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
        }
    }

    showVictoryScreen() {
        const timePlayed = Math.floor((new Date() - this.gameState.startTime) / 1000);
        const minutes = Math.floor(timePlayed / 60);
        const seconds = timePlayed % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        const victoryProfession = document.getElementById('victoryProfession');
        const victoryStars = document.getElementById('victoryStars');
        const victoryTime = document.getElementById('victoryTime');
        
        if (victoryProfession && this.player) {
            victoryProfession.textContent = this.player.profession.fullName;
        }
        if (victoryStars) {
            victoryStars.textContent = this.gameState.stars;
        }
        if (victoryTime) {
            victoryTime.textContent = timeString;
        }
        
        this.showScreen('victoryScreen');
        this.addLogMessage('üéâ –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –ü–û–ë–ï–î–ê! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
        
        alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! –í—ã —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!');
    }

    updateGameDisplay() {
        if (this.player) {
            const playerName = document.getElementById('currentPlayerName');
            const playerProfession = document.getElementById('currentProfession');
            const starsCount = document.getElementById('starsCount');
            
            if (playerName) playerName.textContent = this.player.name;
            if (playerProfession) playerProfession.textContent = this.player.profession.fullName;
            if (starsCount) starsCount.textContent = this.gameState.stars;
        }
    }

    addLogMessage(message) {
        const logContainer = document.getElementById('logMessages');
        if (!logContainer) {
            console.log('üìù –õ–æ–≥:', message);
            return;
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'log-message';
        messageElement.textContent = message;
        
        logContainer.appendChild(messageElement);
        logContainer.scrollTop = logContainer.scrollHeight;

        this.gameState.gameLog.push({
            time: new Date().toLocaleTimeString(),
            message: message
        });
    }

    showScreen(screenName) {
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenName);
        if (targetScreen) {
            targetScreen.classList.add('active');
            this.currentScreen = screenName;
            console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø–æ–∫–∞–∑–∞–Ω:', screenName);
        } else {
            console.error('‚ùå –≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenName);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        if (screenName === 'gameScreen') {
            setTimeout(() => {
                this.updatePlayerPosition();
            }, 200);
        }
    }

    restartGame() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?')) {
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.player = null;
        this.gameState = {
            currentPosition: -1,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null,
            currentMission: null
        };

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const playerName = document.getElementById('playerName');
        const mainSkill = document.getElementById('mainSkill');
        const interestArea = document.getElementById('interestArea');
        const resultDiv = document.getElementById('professionResult');
        const startBtn = document.getElementById('startGame');
        const logContainer = document.getElementById('logMessages');

        if (playerName) playerName.value = '';
        if (mainSkill) mainSkill.value = '';
        if (interestArea) interestArea.value = '';
        if (resultDiv) resultDiv.style.display = 'none';
        if (startBtn) startBtn.disabled = true;
        if (logContainer) logContainer.innerHTML = '';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.showScreen('characterScreen');
        alert('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω!');
    console.log('üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const requiredElements = [
        'loadingScreen', 'characterScreen', 'gameScreen', 
        'missionScreen', 'victoryScreen'
    ];
    
    let allElementsFound = true;
    requiredElements.forEach(id => {
        if (!document.getElementById(id)) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:', id);
            allElementsFound = false;
        }
    });
    
    if (allElementsFound) {
        console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        window.game = new CosmicProfessionGame();
    } else {
        console.error('‚ùå –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –∏–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞');
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', e.error);
    console.error('üìù –í —Ñ–∞–π–ª–µ:', e.filename, '—Å—Ç—Ä–æ–∫–∞:', e.lineno);
});

console.log('üîß game.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
