// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class SpaceProfessionGame {
    constructor() {
        this.player = {
            name: '–ö–æ—Å–º–æ–Ω–∞–≤—Ç',
            profession: '',
            skill: '',
            interest: '',
            stars: 0,
            position: 0,
            avatar: 'üöÄ'
        };
        
        this.gameBoard = [];
        this.currentScreen = 'loading';
        this.isDiceRolling = false;
        this.timerInterval = null;
        this.timeLeft = 120;
        
        this.init();
    }

    init() {
        this.initializeTelegramWebApp();
        this.generateGameBoard();
        this.setupEventListeners();
        this.showLoadingScreen();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    initializeTelegramWebApp() {
        if (window.Telegram && Telegram.WebApp) {
            Telegram.WebApp.ready();
            Telegram.WebApp.expand();
            
            const user = Telegram.WebApp.initDataUnsafe?.user;
            if (user) {
                this.player.name = user.first_name || '–ö–æ—Å–º–æ–Ω–∞–≤—Ç';
                this.player.avatar = this.getAvatarEmoji(user.id);
            }
        }
    }

    getAvatarEmoji(userId) {
        const emojis = ['üöÄ', 'üë®‚ÄçüöÄ', 'üë©‚ÄçüöÄ', 'üõ∏', '‚≠ê', 'üåå', 'ü™ê', '‚òÑÔ∏è'];
        return emojis[userId % emojis.length] || 'üöÄ';
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    generateGameBoard() {
        this.gameBoard = generateGameBoard(15);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        document.getElementById('rollDiceBtn').addEventListener('click', () => this.rollDice());
        
        // –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π
        document.getElementById('completeTaskBtn').addEventListener('click', () => this.completeTask());
        document.getElementById('helpOtherBtn').addEventListener('click', () => this.helpOtherPlayer());
        document.getElementById('closeTaskBtn').addEventListener('click', () => this.closeTaskScreen());
        
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        document.querySelectorAll('.convince-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.convinceAlien(parseInt(e.target.dataset.count)));
        });
        
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        document.getElementById('restartGameBtn').addEventListener('click', () => this.restartGame());
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingScreen() {
        this.showScreen('loadingScreen');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            this.setupPlayerProfession();
            this.showMainScreen();
        }, 3000);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞
    setupPlayerProfession() {
        const randomSkill = GAME_DATA.skills[Math.floor(Math.random() * GAME_DATA.skills.length)];
        const randomInterest = GAME_DATA.interests[Math.floor(Math.random() * GAME_DATA.interests.length)];
        
        this.player.skill = randomSkill;
        this.player.interest = randomInterest;
        this.player.profession = generateProfession(randomSkill, randomInterest);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('playerName').textContent = this.player.name;
        document.getElementById('professionTitle').textContent = this.player.profession;
        document.getElementById('professionDescription').textContent = `–ù–∞–≤—ã–∫: ${randomSkill} | –ò–Ω—Ç–µ—Ä–µ—Å: ${randomInterest}`;
        document.getElementById('playerAvatar').textContent = this.player.avatar;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showMainScreen() {
        this.showScreen('mainScreen');
        this.renderGameBoard();
        this.updatePlayerStats();
    }

    // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    renderGameBoard() {
        const planetPath = document.querySelector('.planet-path');
        planetPath.innerHTML = '';
        
        this.gameBoard.forEach(planet => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.style.left = `${(planet.position / (this.gameBoard.length - 1)) * 90 + 5}%`;
            planetElement.style.top = '50%';
            planetElement.style.transform = 'translate(-50%, -50%)';
            planetElement.innerHTML = planet.icon;
            planetElement.title = `${planet.name}\n${planet.description || ''}`;
            
            planetPath.appendChild(planetElement);
        });
        
        this.updatePlayerPosition();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    updatePlayerPosition() {
        const playerRocket = document.getElementById('playerRocket');
        const currentPlanet = this.gameBoard[this.player.position];
        
        if (currentPlanet) {
            const left = `${(currentPlanet.position / (this.gameBoard.length - 1)) * 90 + 5}%`;
            playerRocket.style.left = left;
            playerRocket.style.top = '30%';
        }
    }

    // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    async rollDice() {
        if (this.isDiceRolling) return;
        
        this.isDiceRolling = true;
        const diceBtn = document.getElementById('rollDiceBtn');
        const diceResult = document.getElementById('diceResult');
        
        diceBtn.disabled = true;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        for (let i = 0; i < 10; i++) {
            const randomNum = Math.floor(Math.random() * 6) + 1;
            diceResult.textContent = randomNum;
            await this.sleep(100);
        }
        
        const finalRoll = Math.floor(Math.random() * 6) + 1;
        diceResult.textContent = finalRoll;
        diceResult.classList.add('fade-in-up');
        
        setTimeout(() => {
            this.movePlayer(finalRoll);
            diceResult.classList.remove('fade-in-up');
            diceBtn.disabled = false;
            this.isDiceRolling = false;
        }, 1000);
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    movePlayer(steps) {
        const newPosition = Math.min(this.player.position + steps, this.gameBoard.length - 1);
        this.player.position = newPosition;
        
        this.updatePlayerPosition();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã
        if (this.gameBoard[newPosition].isWin) {
            if (this.player.stars >= 10) {
                this.showWinScreen();
            } else {
                setTimeout(() => {
                    alert('–ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å 10 –∑–≤–µ–∑–¥, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
                }, 500);
            }
            return;
        }
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã
        setTimeout(() => {
            this.activatePlanet(this.gameBoard[newPosition]);
        }, 1000);
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç—ã
    activatePlanet(planet) {
        switch (planet.type) {
            case 'blue':
                this.showTaskScreen(planet);
                break;
            case 'red':
                this.showProofScreen();
                break;
            case 'green':
                this.showHelpScreen();
                break;
            case 'yellow':
                this.showEventScreen();
                break;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏—è
    showTaskScreen(planet) {
        const problem = getRandomProblem();
        
        document.getElementById('taskPlanetColor').style.background = planet.color;
        document.getElementById('taskPlanetName').textContent = planet.name;
        document.getElementById('taskTitle').textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞';
        document.getElementById('taskDescription').textContent = `${problem}\n\n–¢–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ${this.player.profession}\n\n–ó–∞–¥–∞–Ω–∏–µ: –ü—Ä–∏–¥—É–º–∞–π, –∫–∞–∫ —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å!`;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        this.startTimer();
        
        this.showScreen('taskScreen');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    showProofScreen() {
        document.getElementById('proofStatement').textContent = getRandomProofTemplate(this.player.profession);
        document.getElementById('convincedCount').textContent = '0';
        document.getElementById('proofText').value = '';
        
        this.showScreen('proofScreen');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏
    showHelpScreen() {
        const helpMessage = getRandomHelpMessage();
        
        document.getElementById('taskPlanetColor').style.background = GAME_DATA.planetTypes.green.color;
        document.getElementById('taskPlanetName').textContent = '–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º';
        document.getElementById('taskTitle').textContent = '–ü–æ–º–æ—â—å —Ç–æ–≤–∞—Ä–∏—â—É';
        document.getElementById('taskDescription').textContent = helpMessage;
        
        this.showScreen('taskScreen');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Å–æ–±—ã—Ç–∏—è
    showEventScreen() {
        const event = getRandomEvent();
        
        document.getElementById('taskPlanetColor').style.background = GAME_DATA.planetTypes.yellow.color;
        document.getElementById('taskPlanetName').textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        document.getElementById('taskTitle').textContent = event.title;
        document.getElementById('taskDescription').textContent = event.description;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
        if (event.type === 'positive') {
            if (event.effect.includes('+1 –∑–≤–µ–∑–¥–∞')) {
                this.addStars(1);
            } else if (event.effect.includes('+2 –∑–≤–µ–∑–¥—ã')) {
                this.addStars(2);
            }
        }
        
        this.showScreen('taskScreen');
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    completeTask() {
        this.stopTimer();
        
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        const starsEarned = Math.floor(Math.random() * 2) + 1; // 1-2 –∑–≤–µ–∑–¥—ã
        this.addStars(starsEarned);
        
        this.showMainScreen();
        
        // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ
        setTimeout(() => {
            alert(`–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª ${starsEarned} ‚≠ê –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏!`);
        }, 500);
    }

    // –ü–æ–º–æ—â—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
    helpOtherPlayer() {
        this.stopTimer();
        this.addStars(1);
        
        this.showMainScreen();
        
        setTimeout(() => {
            alert('–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –ø–æ–ª—É—á–∏–ª 1 ‚≠ê –∑–∞ –ø–æ–º–æ—â—å —Ç–æ–≤–∞—Ä–∏—â—É!');
        }, 500);
    }

    // –£–±–µ–∂–¥–µ–Ω–∏–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω–∞
    convinceAlien(count) {
        const convincedCount = parseInt(document.getElementById('convincedCount').textContent);
        const newCount = convincedCount + 1;
        
        document.getElementById('convincedCount').textContent = newCount;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–±–µ–∂–¥–µ–Ω–∏—è
        const aliens = document.querySelectorAll('.convince-btn');
        aliens[count - 1].style.background = 'linear-gradient(45deg, #66bb6a, #4caf50)';
        aliens[count - 1].disabled = true;
        
        if (newCount === 3) {
            this.addStars(3);
            setTimeout(() => {
                this.showMainScreen();
                alert('–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã —É–±–µ–¥–∏–ª –≤—Å–µ—Ö –∏ –ø–æ–ª—É—á–∏–ª 3 ‚≠ê!');
            }, 1000);
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è
    closeTaskScreen() {
        this.stopTimer();
        this.showMainScreen();
    }

    // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
    startTimer() {
        this.timeLeft = 120;
        this.updateTimerDisplay();
        
        this.timerInterval = setInterval(() => {
            this.timeLeft--;
            this.updateTimerDisplay();
            
            if (this.timeLeft <= 0) {
                this.stopTimer();
                alert('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.');
                this.showMainScreen();
            }
        }, 1000);
    }

    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    updateTimerDisplay() {
        const minutes = Math.floor(this.timeLeft / 60);
        const seconds = this.timeLeft % 60;
        document.getElementById('timerText').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        const timerFill = document.querySelector('.timer-fill');
        const progress = ((120 - this.timeLeft) / 120) * 100;
        timerFill.style.background = `conic-gradient(#4caf50 ${progress}%, transparent 0%)`;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
    addStars(count) {
        this.player.stars += count;
        this.updatePlayerStats();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.player.stars >= 10 && this.player.position === this.gameBoard.length - 1) {
            this.showWinScreen();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
    updatePlayerStats() {
        document.getElementById('starsCount').textContent = this.player.stars;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã
    showWinScreen() {
        document.getElementById('finalStars').textContent = this.player.stars;
        document.getElementById('winProfession').textContent = this.player.profession;
        this.showScreen('winScreen');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
        if (window.Telegram && Telegram.WebApp) {
            Telegram.WebApp.HapticFeedback.impactOccurred('heavy');
        }
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    restartGame() {
        this.player.stars = 0;
        this.player.position = 0;
        this.generateGameBoard();
        this.setupPlayerProfession();
        this.showMainScreen();
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
    showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        document.getElementById(screenId).classList.add('active');
        this.currentScreen = screenId;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    window.spaceGame = new SpaceProfessionGame();
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
function animateValue(element, start, end, duration) {
    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const value = Math.floor(progress * (end - start) + start);
        element.textContent = value;
        if (progress < 1) {
            window.requestAnimationFrame(step);
        }
    };
    window.requestAnimationFrame(step);
}
