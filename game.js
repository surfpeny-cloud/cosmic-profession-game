// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class SpaceProfessionGame {
    constructor() {
        this.player = {
            name: '–ö–æ—Å–º–æ–Ω–∞–≤—Ç',
            profession: '',
            skill: '',
            interest: '',
            stars: 0,
            position: 0,
            avatar: 'üöÄ'
        };
        
        this.gameBoard = [];
        this.currentScreen = 'loading';
        this.isDiceRolling = false;
        this.timerInterval = null;
        this.timeLeft = 120;
        
        this.init();
    }

    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        this.initializeTelegramWebApp();
        this.generateGameBoard();
        this.setupEventListeners();
        this.showLoadingScreen();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    initializeTelegramWebApp() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App...');
        try {
            if (window.Telegram && Telegram.WebApp) {
                Telegram.WebApp.ready();
                Telegram.WebApp.expand();
                
                const user = Telegram.WebApp.initDataUnsafe?.user;
                if (user) {
                    this.player.name = user.first_name || '–ö–æ—Å–º–æ–Ω–∞–≤—Ç';
                    this.player.avatar = this.getAvatarEmoji(user.id);
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', this.player.name);
                } else {
                    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ');
                }
            } else {
                console.log('Telegram Web App –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
                // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
                this.player.name = '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ—Å–º–æ–Ω–∞–≤—Ç';
                this.player.avatar = 'üë®‚ÄçüöÄ';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error);
            this.player.name = '–ö–æ—Å–º–æ–Ω–∞–≤—Ç';
            this.player.avatar = 'üöÄ';
        }
    }

    getAvatarEmoji(userId) {
        const emojis = ['üöÄ', 'üë®‚ÄçüöÄ', 'üë©‚ÄçüöÄ', 'üõ∏', '‚≠ê', 'üåå', 'ü™ê', '‚òÑÔ∏è'];
        return emojis[Math.abs(userId) % emojis.length] || 'üöÄ';
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    generateGameBoard() {
        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è...');
        this.gameBoard = generateGameBoard(15);
        console.log('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ–∑–¥–∞–Ω–æ:', this.gameBoard.length, '–ø–ª–∞–Ω–µ—Ç');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        const rollDiceBtn = document.getElementById('rollDiceBtn');
        if (rollDiceBtn) {
            rollDiceBtn.addEventListener('click', () => this.rollDice());
            console.log('–ö–Ω–æ–ø–∫–∞ –∫—É–±–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π
        const completeTaskBtn = document.getElementById('completeTaskBtn');
        const helpOtherBtn = document.getElementById('helpOtherBtn');
        const closeTaskBtn = document.getElementById('closeTaskBtn');
        
        if (completeTaskBtn) completeTaskBtn.addEventListener('click', () => this.completeTask());
        if (helpOtherBtn) helpOtherBtn.addEventListener('click', () => this.helpOtherPlayer());
        if (closeTaskBtn) closeTaskBtn.addEventListener('click', () => this.closeTaskScreen());

        // –ö–Ω–æ–ø–∫–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        const convinceButtons = document.querySelectorAll('.convince-btn');
        convinceButtons.forEach(btn => {
            btn.addEventListener('click', (e) => this.convinceAlien(parseInt(e.target.dataset.count)));
        });

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        const restartBtn = document.getElementById('restartGameBtn');
        if (restartBtn) {
            restartBtn.addEventListener('click', () => this.restartGame());
        }

        console.log('–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingScreen() {
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏...');
        this.showScreen('loadingScreen');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingProgress = document.querySelector('.loading-progress');
        if (loadingProgress) {
            loadingProgress.style.width = '100%';
        }

        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏');
            this.setupPlayerProfession();
            this.showMainScreen();
        }, 2000); // –£–º–µ–Ω—å—à–∏–ª –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞
    setupPlayerProfession() {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞...');
        
        const randomSkill = GAME_DATA.skills[Math.floor(Math.random() * GAME_DATA.skills.length)];
        const randomInterest = GAME_DATA.interests[Math.floor(Math.random() * GAME_DATA.interests.length)];
        
        this.player.skill = randomSkill;
        this.player.interest = randomInterest;
        this.player.profession = generateProfession(randomSkill, randomInterest);
        
        console.log('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
            profession: this.player.profession,
            skill: randomSkill,
            interest: randomInterest
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updatePlayerInfo();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ
    updatePlayerInfo() {
        const playerName = document.getElementById('playerName');
        const professionTitle = document.getElementById('professionTitle');
        const professionDescription = document.getElementById('professionDescription');
        const playerAvatar = document.getElementById('playerAvatar');

        if (playerName) playerName.textContent = this.player.name;
        if (professionTitle) professionTitle.textContent = this.player.profession;
        if (professionDescription) {
            professionDescription.textContent = `–ù–∞–≤—ã–∫: ${this.player.skill} | –ò–Ω—Ç–µ—Ä–µ—Å: ${this.player.interest}`;
        }
        if (playerAvatar) playerAvatar.textContent = this.player.avatar;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showMainScreen() {
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω...');
        this.showScreen('mainScreen');
        this.renderGameBoard();
        this.updatePlayerStats();
        console.log('–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω');
    }

    // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    renderGameBoard() {
        console.log('–†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è...');
        const planetPath = document.querySelector('.planet-path');
        if (!planetPath) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç .planet-path –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        planetPath.innerHTML = '';
        
        this.gameBoard.forEach(planet => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.style.left = `${(planet.position / (this.gameBoard.length - 1)) * 90 + 5}%`;
            planetElement.style.top = '50%';
            planetElement.style.transform = 'translate(-50%, -50%)';
            planetElement.innerHTML = planet.icon;
            planetElement.title = `${planet.name}\n${planet.description || ''}`;
            
            planetPath.appendChild(planetElement);
        });
        
        this.updatePlayerPosition();
        console.log('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    updatePlayerPosition() {
        const playerRocket = document.getElementById('playerRocket');
        if (!playerRocket) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç playerRocket –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        const currentPlanet = this.gameBoard[this.player.position];
        
        if (currentPlanet) {
            const left = `${(currentPlanet.position / (this.gameBoard.length - 1)) * 90 + 5}%`;
            playerRocket.style.left = left;
            playerRocket.style.top = '30%';
            console.log('–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', this.player.position);
        }
    }

    // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    async rollDice() {
        if (this.isDiceRolling) return;
        
        console.log('–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞...');
        this.isDiceRolling = true;
        const diceBtn = document.getElementById('rollDiceBtn');
        const diceResult = document.getElementById('diceResult');
        
        if (!diceBtn || !diceResult) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –∫—É–±–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            this.isDiceRolling = false;
            return;
        }

        diceBtn.disabled = true;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        for (let i = 0; i < 10; i++) {
            const randomNum = Math.floor(Math.random() * 6) + 1;
            diceResult.textContent = randomNum;
            await this.sleep(100);
        }
        
        const finalRoll = Math.floor(Math.random() * 6) + 1;
        diceResult.textContent = finalRoll;
        diceResult.classList.add('fade-in-up');
        
        console.log('–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ:', finalRoll);
        
        setTimeout(() => {
            this.movePlayer(finalRoll);
            diceResult.classList.remove('fade-in-up');
            diceBtn.disabled = false;
            this.isDiceRolling = false;
        }, 1000);
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    movePlayer(steps) {
        console.log('–î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞', steps, '—à–∞–≥–æ–≤');
        const newPosition = Math.min(this.player.position + steps, this.gameBoard.length - 1);
        this.player.position = newPosition;
        
        this.updatePlayerPosition();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã
        if (this.gameBoard[newPosition].isWin) {
            console.log('–ò–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã');
            if (this.player.stars >= 10) {
                this.showWinScreen();
            } else {
                setTimeout(() => {
                    alert('–ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å 10 –∑–≤–µ–∑–¥, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
                }, 500);
            }
            return;
        }
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã
        setTimeout(() => {
            this.activatePlanet(this.gameBoard[newPosition]);
        }, 1000);
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç—ã
    activatePlanet(planet) {
        console.log('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç—ã:', planet.type, planet.name);
        
        switch (planet.type) {
            case 'blue':
                this.showTaskScreen(planet);
                break;
            case 'red':
                this.showProofScreen();
                break;
            case 'green':
                this.showHelpScreen();
                break;
            case 'yellow':
                this.showEventScreen();
                break;
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–µ—Ç—ã:', planet.type);
                this.showMainScreen();
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏—è
    showTaskScreen(planet) {
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–µ—Ç—ã:', planet.name);
        
        const problem = getRandomProblem();
        const taskPlanetColor = document.getElementById('taskPlanetColor');
        const taskPlanetName = document.getElementById('taskPlanetName');
        const taskTitle = document.getElementById('taskTitle');
        const taskDescription = document.getElementById('taskDescription');

        if (taskPlanetColor) taskPlanetColor.style.background = planet.color;
        if (taskPlanetName) taskPlanetName.textContent = planet.name;
        if (taskTitle) taskTitle.textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞';
        if (taskDescription) {
            taskDescription.textContent = `${problem}\n\n–¢–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ${this.player.profession}\n\n–ó–∞–¥–∞–Ω–∏–µ: –ü—Ä–∏–¥—É–º–∞–π, –∫–∞–∫ —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å!`;
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        this.startTimer();
        
        this.showScreen('taskScreen');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    showProofScreen() {
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞');
        
        const proofStatement = document.getElementById('proofStatement');
        const convincedCount = document.getElementById('convincedCount');
        const proofText = document.getElementById('proofText');

        if (proofStatement) proofStatement.textContent = getRandomProofTemplate(this.player.profession);
        if (convincedCount) convincedCount.textContent = '0';
        if (proofText) proofText.value = '';
        
        // –°–±—Ä–æ—Å –∫–Ω–æ–ø–æ–∫ —É–±–µ–∂–¥–µ–Ω–∏—è
        document.querySelectorAll('.convince-btn').forEach(btn => {
            btn.style.background = 'linear-gradient(45deg, #667eea, #764ba2)';
            btn.disabled = false;
        });
        
        this.showScreen('proofScreen');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏
    showHelpScreen() {
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–º–æ—â–∏');
        
        const helpMessage = getRandomHelpMessage();
        const taskPlanetColor = document.getElementById('taskPlanetColor');
        const taskPlanetName = document.getElementById('taskPlanetName');
        const taskTitle = document.getElementById('taskTitle');
        const taskDescription = document.getElementById('taskDescription');

        if (taskPlanetColor) taskPlanetColor.style.background = GAME_DATA.planetTypes.green.color;
        if (taskPlanetName) taskPlanetName.textContent = '–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º';
        if (taskTitle) taskTitle.textContent = '–ü–æ–º–æ—â—å —Ç–æ–≤–∞—Ä–∏—â—É';
        if (taskDescription) taskDescription.textContent = helpMessage;
        
        this.showScreen('taskScreen');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Å–æ–±—ã—Ç–∏—è
    showEventScreen() {
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ —Å–æ–±—ã—Ç–∏—è');
        
        const event = getRandomEvent();
        const taskPlanetColor = document.getElementById('taskPlanetColor');
        const taskPlanetName = document.getElementById('taskPlanetName');
        const taskTitle = document.getElementById('taskTitle');
        const taskDescription = document.getElementById('taskDescription');

        if (taskPlanetColor) taskPlanetColor.style.background = GAME_DATA.planetTypes.yellow.color;
        if (taskPlanetName) taskPlanetName.textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        if (taskTitle) taskTitle.textContent = event.title;
        if (taskDescription) taskDescription.textContent = event.description;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
        if (event.type === 'positive') {
            if (event.effect.includes('+1 –∑–≤–µ–∑–¥–∞')) {
                this.addStars(1);
            } else if (event.effect.includes('+2 –∑–≤–µ–∑–¥—ã')) {
                this.addStars(2);
            }
        }
        
        this.showScreen('taskScreen');
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    completeTask() {
        console.log('–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        this.stopTimer();
        
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        const starsEarned = Math.floor(Math.random() * 2) + 1; // 1-2 –∑–≤–µ–∑–¥—ã
        this.addStars(starsEarned);
        
        this.showMainScreen();
        
        // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ
        setTimeout(() => {
            alert(`–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–ª—É—á–∏–ª ${starsEarned} ‚≠ê –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏!`);
        }, 500);
    }

    // –ü–æ–º–æ—â—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
    helpOtherPlayer() {
        console.log('–ü–æ–º–æ—â—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É');
        this.stopTimer();
        this.addStars(1);
        
        this.showMainScreen();
        
        setTimeout(() => {
            alert('–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –ø–æ–ª—É—á–∏–ª 1 ‚≠ê –∑–∞ –ø–æ–º–æ—â—å —Ç–æ–≤–∞—Ä–∏—â—É!');
        }, 500);
    }

    // –£–±–µ–∂–¥–µ–Ω–∏–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω–∞
    convinceAlien(count) {
        console.log('–£–±–µ–∂–¥–µ–Ω–∏–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω–∞ ‚Ññ', count);
        
        const convincedCountElement = document.getElementById('convincedCount');
        if (!convincedCountElement) return;
        
        const convincedCount = parseInt(convincedCountElement.textContent);
        const newCount = convincedCount + 1;
        
        convincedCountElement.textContent = newCount;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–±–µ–∂–¥–µ–Ω–∏—è
        const aliens = document.querySelectorAll('.convince-btn');
        if (aliens[count - 1]) {
            aliens[count - 1].style.background = 'linear-gradient(45deg, #66bb6a, #4caf50)';
            aliens[count - 1].disabled = true;
        }
        
        if (newCount === 3) {
            console.log('–í—Å–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ —É–±–µ–∂–¥–µ–Ω—ã!');
            this.addStars(3);
            setTimeout(() => {
                this.showMainScreen();
                alert('–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã —É–±–µ–¥–∏–ª –≤—Å–µ—Ö –∏ –ø–æ–ª—É—á–∏–ª 3 ‚≠ê!');
            }, 1000);
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è
    closeTaskScreen() {
        console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è');
        this.stopTimer();
        this.showMainScreen();
    }

    // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
    startTimer() {
        console.log('–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞');
        this.timeLeft = 120;
        this.updateTimerDisplay();
        
        this.timerInterval = setInterval(() => {
            this.timeLeft--;
            this.updateTimerDisplay();
            
            if (this.timeLeft <= 0) {
                this.stopTimer();
                alert('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.');
                this.showMainScreen();
            }
        }, 1000);
    }

    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
            console.log('–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    updateTimerDisplay() {
        const minutes = Math.floor(this.timeLeft / 60);
        const seconds = this.timeLeft % 60;
        const timerText = document.getElementById('timerText');
        const timerFill = document.querySelector('.timer-fill');

        if (timerText) {
            timerText.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        if (timerFill) {
            const progress = ((120 - this.timeLeft) / 120) * 100;
            timerFill.style.background = `conic-gradient(#4caf50 ${progress}%, transparent 0%)`;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥
    addStars(count) {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥:', count);
        this.player.stars += count;
        this.updatePlayerStats();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.player.stars >= 10 && this.player.position === this.gameBoard.length - 1) {
            this.showWinScreen();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
    updatePlayerStats() {
        const starsCount = document.getElementById('starsCount');
        if (starsCount) {
            starsCount.textContent = this.player.stars;
        }
        console.log('–ó–≤–µ–∑–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.player.stars);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã
    showWinScreen() {
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã!');
        
        const finalStars = document.getElementById('finalStars');
        const winProfession = document.getElementById('winProfession');

        if (finalStars) finalStars.textContent = this.player.stars;
        if (winProfession) winProfession.textContent = this.player.profession;
        
        this.showScreen('winScreen');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
        if (window.Telegram && Telegram.WebApp) {
            Telegram.WebApp.HapticFeedback.impactOccurred('heavy');
        }
        
        console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!');
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    restartGame() {
        console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        this.player.stars = 0;
        this.player.position = 0;
        this.generateGameBoard();
        this.setupPlayerProfession();
        this.showMainScreen();
        console.log('–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞');
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
    showScreen(screenId) {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
        
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.add('active');
            this.currentScreen = screenId;
            console.log('–≠–∫—Ä–∞–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.error('–≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenId);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    window.spaceGame = new SpaceProfessionGame();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugGame = () => {
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', window.spaceGame);
    console.log('–ò–≥—Ä–æ–∫:', window.spaceGame.player);
    console.log('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ:', window.spaceGame.gameBoard);
};
