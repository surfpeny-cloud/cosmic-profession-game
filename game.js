// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å
class CosmicProfessionGame {
    constructor() {
        this.currentScreen = 'loadingScreen';
        this.player = null;
        this.gameState = {
            currentPosition: 0,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null
        };
        this.planets = [];
        this.init();
    }

    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        this.initTelegram();
        this.createGamePlanets();
        this.bindEvents();
        this.showScreen('loadingScreen');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            this.showScreen('characterScreen');
        }, 2000);
    }

    initTelegram() {
        if (window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
            console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    createGamePlanets() {
        this.planets = GAME_DATA.planets;
        console.log('–°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–Ω–µ—Ç:', this.planets.length);
    }

    bindEvents() {
        console.log('–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        document.getElementById('generateProfession').addEventListener('click', () => {
            console.log('–ö–ª–∏–∫ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏');
            this.generatePlayerProfession();
        });

        document.getElementById('startGame').addEventListener('click', () => {
            console.log('–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã');
            this.startGame();
        });

        // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('rollDice').addEventListener('click', () => {
            console.log('–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞');
            this.rollDice();
        });

        // –ó–∞–¥–∞–Ω–∏—è
        document.getElementById('completeMission').addEventListener('click', () => {
            console.log('–û–±—ã—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
            this.showSolutionInput();
        });

        document.getElementById('creativeSolution').addEventListener('click', () => {
            console.log('–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
            this.showSolutionInput(true);
        });

        document.getElementById('submitSolution').addEventListener('click', () => {
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è');
            this.completeMission();
        });

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        document.getElementById('restartGame').addEventListener('click', () => {
            console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
            this.restartGame();
        });

        console.log('–í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    generatePlayerProfession() {
        const name = document.getElementById('playerName').value.trim();
        const skill = document.getElementById('mainSkill').value;
        const interest = document.getElementById('interestArea').value;

        console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { name, skill, interest });

        if (!name || !skill || !interest) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
            return;
        }

        const profession = GameUtils.generateProfession(skill, interest);
        
        this.player = {
            name: name,
            profession: profession,
            skill: skill,
            interest: interest
        };

        console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:', profession);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultDiv = document.getElementById('professionResult');
        document.getElementById('professionName').textContent = profession.fullName;
        document.getElementById('professionDescription').textContent = profession.description;
        resultDiv.style.display = 'block';

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
        document.getElementById('startGame').disabled = false;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        resultDiv.style.animation = 'fadeIn 0.5s ease-in';
        
        this.showNotification('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É.', 'success');
    }

    startGame() {
        if (!this.player) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!', 'error');
            return;
        }

        console.log('–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –¥–ª—è:', this.player.name);
        
        this.gameState.startTime = new Date();
        this.updateGameDisplay();
        this.showScreen('gameScreen');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DOM –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º –∫–∞—Ä—Ç—ã
        setTimeout(() => {
            this.renderGameMap();
        }, 100);
        
        this.addLogMessage(`üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å ${this.player.name} —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∫ –ü–ª–∞–Ω–µ—Ç–µ –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!`);
        this.addLogMessage(`üéØ –í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ${this.player.profession.fullName}`);
    }

    renderGameMap() {
        const track = document.getElementById('planetsTrack');
        if (!track) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç planetsTrack –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        track.innerHTML = '';

        this.planets.forEach((planet, index) => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.innerHTML = planet.icon;
            planetElement.title = `${planet.name}\n${GameUtils.getPlanetDescription(planet.name)}`;
            track.appendChild(planetElement);
        });

        console.log('–ö–∞—Ä—Ç–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞, –ø–ª–∞–Ω–µ—Ç:', this.planets.length);
        this.updatePlayerPosition();
    }

    updatePlayerPosition() {
        const marker = document.getElementById('playerMarker');
        const planets = document.querySelectorAll('.planet');
        
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:', this.gameState.currentPosition);
        
        if (planets.length > 0 && planets[this.gameState.currentPosition]) {
            const planetRect = planets[this.gameState.currentPosition].getBoundingClientRect();
            const trackRect = document.querySelector('.planets-track').getBoundingClientRect();
            
            const leftPosition = planetRect.left - trackRect.left + planetRect.width/2 - 15;
            const topPosition = planetRect.top - trackRect.top - 30;
            
            marker.style.left = `${leftPosition}px`;
            marker.style.top = `${topPosition}px`;
            
            console.log('–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { left: leftPosition, top: topPosition });
        } else {
            console.error('–ù–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞');
        }
    }

    rollDice() {
        const diceBtn = document.getElementById('rollDice');
        diceBtn.disabled = true;

        console.log('–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞...');

        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const diceResult = document.getElementById('diceResult');
        diceResult.textContent = 'üé≤';
        diceResult.style.animation = 'none';
        void diceResult.offsetWidth; // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        diceResult.style.animation = 'diceRoll 0.5s ease-out';

        setTimeout(() => {
            const roll = Math.floor(Math.random() * 6) + 1;
            diceResult.textContent = this.getDiceEmoji(roll);
            console.log('–í—ã–ø–∞–ª–æ:', roll);
            
            this.movePlayer(roll);
            diceBtn.disabled = false;
        }, 500);
    }

    getDiceEmoji(number) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[number - 1] || 'üé≤';
    }

    movePlayer(steps) {
        this.addLogMessage(`üé≤ –í—ã–ø–∞–ª–æ: ${steps}`);

        const newPosition = this.gameState.currentPosition + steps;
        const maxPosition = this.planets.length;

        console.log(`–î–≤–∏–∂–µ–Ω–∏–µ: —Å ${this.gameState.currentPosition} –Ω–∞ ${newPosition}`);

        if (newPosition >= maxPosition) {
            this.gameState.currentPosition = maxPosition - 1;
            this.addLogMessage('üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞!');
            this.reachFinalPlanet();
        } else {
            this.gameState.currentPosition = newPosition;
            this.arriveAtPlanet();
        }

        this.updatePlayerPosition();
        this.updateGameDisplay();
    }

    arriveAtPlanet() {
        const currentPlanet = this.planets[this.gameState.currentPosition];
        
        console.log('–ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É:', currentPlanet);
        
        this.addLogMessage(`ü™ê –ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É: ${currentPlanet.name}`);
        this.addLogMessage(`üìù ${GameUtils.getPlanetDescription(currentPlanet.name)}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏—è
        this.showMissionScreen(currentPlanet);
    }

    showMissionScreen(planet) {
        const mission = GameUtils.generateMission(planet.type, this.player.profession);
        
        console.log('–ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è:', mission);
        
        document.getElementById('missionPlanetIcon').textContent = planet.icon;
        document.getElementById('missionPlanetName').textContent = planet.name;
        document.getElementById('missionType').textContent = mission.name;
        document.getElementById('missionType').className = `mission-type ${planet.type}`;
        document.getElementById('missionText').textContent = mission.text;
        document.getElementById('missionProfession').textContent = this.player.profession.fullName;

        // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById('missionTimer').textContent = this.formatTime(mission.time);
        document.getElementById('solutionInput').style.display = 'none';
        document.getElementById('solutionText').value = '';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –±—ã–ª
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        this.startMissionTimer(mission.time);
        this.showScreen('missionScreen');
    }

    startMissionTimer(seconds) {
        this.timerSeconds = seconds;
        this.timerInterval = setInterval(() => {
            this.timerSeconds--;
            document.getElementById('missionTimer').textContent = this.formatTime(this.timerSeconds);
            
            if (this.timerSeconds <= 0) {
                clearInterval(this.timerInterval);
                this.timeOutMission();
            }
        }, 1000);
    }

    formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    timeOutMission() {
        this.addLogMessage('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.');
        this.showScreen('gameScreen');
    }

    showSolutionInput(isCreative = false) {
        this.isCreativeSolution = isCreative;
        document.getElementById('solutionInput').style.display = 'block';
        
        if (isCreative) {
            this.addLogMessage('‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!');
        }
    }

    completeMission() {
        const solution = document.getElementById('solutionText').value.trim();
        
        if (!solution) {
            this.showNotification('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ!', 'error');
            return;
        }

        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        const currentPlanet = this.planets[this.gameState.currentPosition];
        let starsEarned = 1;

        if (this.isCreativeSolution) {
            starsEarned = 2;
            this.addLogMessage('üéâ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! +2 –∑–≤–µ–∑–¥—ã');
        } else {
            this.addLogMessage('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +1 –∑–≤–µ–∑–¥–∞');
        }

        // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–µ—Ç
        if (currentPlanet.type === 'red') {
            starsEarned += 1;
            this.addLogMessage('üí¨ –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ! +1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞');
        }

        this.gameState.stars += starsEarned;
        this.gameState.visitedPlanets.push(currentPlanet.id);

        this.addLogMessage(`‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: ${starsEarned}`);
        this.addLogMessage(`üìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: ${this.gameState.stars}/10`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 1000);
        } else {
            this.showScreen('gameScreen');
        }
    }

    reachFinalPlanet() {
        this.addLogMessage('üéØ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
        
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 1000);
        } else {
            this.addLogMessage('‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–±–µ–¥—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.');
        }
    }

    showVictoryScreen() {
        const timePlayed = Math.floor((new Date() - this.gameState.startTime) / 1000);
        
        document.getElementById('victoryProfession').textContent = this.player.profession.fullName;
        document.getElementById('victoryStars').textContent = this.gameState.stars;
        document.getElementById('victoryTime').textContent = this.formatTime(timePlayed);
        
        this.showScreen('victoryScreen');
        this.addLogMessage('üéâ –ü–û–ë–ï–î–ê! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
    }

    updateGameDisplay() {
        if (this.player) {
            document.getElementById('currentPlayerName').textContent = this.player.name;
            document.getElementById('currentProfession').textContent = this.player.profession.fullName;
            document.getElementById('starsCount').textContent = this.gameState.stars;
        }
    }

    addLogMessage(message) {
        const logContainer = document.querySelector('.log-messages');
        if (!logContainer) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'log-message';
        messageElement.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        
        logContainer.appendChild(messageElement);
        logContainer.scrollTop = logContainer.scrollHeight;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
        this.gameState.gameLog.push({
            time: new Date().toLocaleTimeString(),
            message: message
        });
        
        console.log('–õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω:', message);
    }

    showScreen(screenName) {
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenName);
        if (targetScreen) {
            targetScreen.classList.add('active');
            this.currentScreen = screenName;
            console.log('–≠–∫—Ä–∞–Ω –ø–æ–∫–∞–∑–∞–Ω:', screenName);
        } else {
            console.error('–≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenName);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        if (screenName === 'gameScreen') {
            setTimeout(() => {
                this.updatePlayerPosition();
            }, 200);
        }
    }

    showNotification(message, type = 'info') {
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ alert
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π toast
        alert(`${type.toUpperCase()}: ${message}`);
    }

    restartGame() {
        console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        
        this.player = null;
        this.gameState = {
            currentPosition: 0,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null
        };

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('playerName').value = '';
        document.getElementById('mainSkill').value = '';
        document.getElementById('interestArea').value = '';
        document.getElementById('professionResult').style.display = 'none';
        document.getElementById('startGame').disabled = true;
        
        const logContainer = document.querySelector('.log-messages');
        if (logContainer) {
            logContainer.innerHTML = '';
        }

        this.showScreen('characterScreen');
        this.showNotification('–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.', 'info');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    window.game = new CosmicProfessionGame();
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in { 
        animation: fadeIn 0.5s ease-in; 
    }
    
    /* –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px;
        border-radius: 10px;
        color: white;
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
    }
    
    .notification.success { background: #4CAF50; }
    .notification.error { background: #f44336; }
    .notification.info { background: #2196F3; }
    
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
`;
document.head.appendChild(style);
