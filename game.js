// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–¥
class CosmicProfessionGame {
    constructor() {
        this.currentScreen = 'loading';
        this.player = null;
        this.gameState = {
            currentPosition: 0,
            stars: 0,
            planets: [],
            currentPlanet: null,
            diceValue: 0,
            gameStarted: false
        };
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.loadGameData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        this.showScreen('loading');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            this.showScreen('profile');
            this.setupEventListeners();
        }, 3000);
    }

    loadGameData() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        this.populateSkills();
        this.populateInterests();
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        this.gameState.planets = GameData.createGameBoard(15);
        this.renderGameBoard();
    }

    populateSkills() {
        const container = document.getElementById('skillsContainer');
        container.innerHTML = '';
        
        GameData.skills.forEach(skill => {
            const button = document.createElement('button');
            button.className = 'skill-btn';
            button.textContent = skill;
            button.addEventListener('click', () => this.selectSkill(skill, button));
            container.appendChild(button);
        });
    }

    populateInterests() {
        const container = document.getElementById('interestsContainer');
        container.innerHTML = '';
        
        GameData.interests.forEach(interest => {
            const button = document.createElement('button');
            button.className = 'interest-btn';
            button.textContent = interest;
            button.addEventListener('click', () => this.selectInterest(interest, button));
            container.appendChild(button);
        });
    }

    selectSkill(skill, element) {
        document.querySelectorAll('.skill-btn').forEach(btn => btn.classList.remove('selected'));
        element.classList.add('selected');
        this.updateProfessionPreview();
    }

    selectInterest(interest, element) {
        document.querySelectorAll('.interest-btn').forEach(btn => btn.classList.remove('selected'));
        element.classList.add('selected');
        this.updateProfessionPreview();
    }

    updateProfessionPreview() {
        const skillBtn = document.querySelector('.skill-btn.selected');
        const interestBtn = document.querySelector('.interest-btn.selected');
        const professionDisplay = document.getElementById('professionDisplay');
        const startBtn = document.getElementById('startGameBtn');

        if (skillBtn && interestBtn) {
            const skill = skillBtn.textContent;
            const interest = interestBtn.textContent;
            const profession = GameData.generateProfession(skill, interest);
            professionDisplay.textContent = profession;
            startBtn.disabled = false;
        } else {
            professionDisplay.textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π ...';
            startBtn.disabled = true;
        }
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        document.getElementById('startGameBtn').addEventListener('click', () => {
            this.createPlayerProfile();
            this.startGame();
        });

        // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        document.getElementById('rollDiceBtn').addEventListener('click', () => {
            this.rollDice();
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
        document.getElementById('submitSolution').addEventListener('click', () => {
            this.submitSolution();
        });

        document.getElementById('startPresentation').addEventListener('click', () => {
            this.startPresentation();
        });

        document.getElementById('submitHelp').addEventListener('click', () => {
            this.submitHelp();
        });

        document.getElementById('continueBtn').addEventListener('click', () => {
            this.continueGame();
        });

        document.getElementById('restartGame').addEventListener('click', () => {
            this.restartGame();
        });
    }

    createPlayerProfile() {
        const name = document.getElementById('playerName').value || '–ö–æ—Å–º–æ–Ω–∞–≤—Ç';
        const skill = document.querySelector('.skill-btn.selected')?.textContent || '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ';
        const interest = document.querySelector('.interest-btn.selected')?.textContent || '–ö–æ—Å–º–æ—Å';
        
        this.player = {
            name: name,
            skill: skill,
            interest: interest,
            profession: GameData.generateProfession(skill, interest)
        };
    }

    startGame() {
        this.showScreen('game');
        this.updatePlayerInfo();
        this.gameState.gameStarted = true;
        
        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
        this.playBackgroundMusic();
    }

    updatePlayerInfo() {
        document.getElementById('currentPlayerName').textContent = this.player.name;
        document.getElementById('currentProfession').textContent = this.player.profession;
        document.getElementById('starCount').textContent = this.gameState.stars;
    }

    renderGameBoard() {
        const track = document.getElementById('planetsTrack');
        track.innerHTML = '';
        
        this.gameState.planets.forEach(planet => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.setAttribute('data-planet-id', planet.id);
            planetElement.innerHTML = this.getPlanetEmoji(planet.type);
            
            const label = document.createElement('div');
            label.className = 'planet-label';
            label.textContent = planet.name;
            
            planetElement.appendChild(label);
            track.appendChild(planetElement);
        });
    }

    getPlanetEmoji(type) {
        const emojis = {
            blue: 'üîµ',
            red: 'üî¥',
            green: 'üü¢',
            yellow: 'üü°'
        };
        return emojis[type] || 'üåç';
    }

    rollDice() {
        const diceBtn = document.getElementById('rollDiceBtn');
        const diceResult = document.getElementById('diceResult');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        diceBtn.disabled = true;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        let rolls = 0;
        const maxRolls = 10;
        const rollInterval = setInterval(() => {
            const randomValue = Math.floor(Math.random() * 6) + 1;
            diceResult.textContent = randomValue;
            rolls++;
            
            if (rolls >= maxRolls) {
                clearInterval(rollInterval);
                const finalValue = Math.floor(Math.random() * 6) + 1;
                this.gameState.diceValue = finalValue;
                diceResult.textContent = finalValue;
                
                // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
                this.playSound('diceSound');
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞
                setTimeout(() => this.movePlayer(), 1000);
            }
        }, 100);
    }

    movePlayer() {
        const newPosition = this.gameState.currentPosition + this.gameState.diceValue;
        const maxPosition = this.gameState.planets.length;
        
        if (newPosition >= maxPosition) {
            this.gameState.currentPosition = maxPosition - 1;
            this.completeGame();
        } else {
            this.gameState.currentPosition = newPosition;
            this.updateRocketPosition();
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–ª–∞–Ω–µ—Ç—É
            setTimeout(() => this.activatePlanet(), 1000);
        }
    }

    updateRocketPosition() {
        const rocket = document.getElementById('playerRocket');
        const track = document.getElementById('planetsTrack');
        const planets = track.querySelectorAll('.planet');
        
        if (planets[this.gameState.currentPosition]) {
            const planetRect = planets[this.gameState.currentPosition].getBoundingClientRect();
            const trackRect = track.getBoundingClientRect();
            
            const position = planetRect.left - trackRect.left + planetRect.width / 2;
            rocket.style.left = position + 'px';
        }
    }

    activatePlanet() {
        const currentPlanet = this.gameState.planets[this.gameState.currentPosition];
        this.gameState.currentPlanet = currentPlanet;
        
        this.showMissionScreen(currentPlanet);
    }

    showMissionScreen(planet) {
        this.showScreen('mission');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ—Ç–µ
        document.getElementById('missionPlanetName').textContent = planet.name;
        document.getElementById('missionPlanetIcon').textContent = this.getPlanetEmoji(planet.type);
        document.getElementById('missionProfession').textContent = this.player.profession;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞–Ω–µ—Ç—ã
        this.setupMission(planet.type);
    }

    setupMission(planetType) {
        const missionType = document.getElementById('missionType');
        const missionText = document.getElementById('missionText');
        const missionInput = document.getElementById('missionInput');
        const convincePlayers = document.getElementById('convincePlayers');
        const helpOthers = document.getElementById('helpOthers');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
        missionInput.style.display = 'none';
        convincePlayers.style.display = 'none';
        helpOthers.style.display = 'none';
        
        switch(planetType) {
            case 'blue': // –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
                missionType.textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞';
                missionType.style.background = 'rgba(59, 130, 246, 0.3)';
                missionText.textContent = GameData.getRandomProblem();
                missionInput.style.display = 'block';
                this.startTimer(120); // 2 –º–∏–Ω—É—Ç—ã
                break;
                
            case 'red': // –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
                missionType.textContent = '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏';
                missionType.style.background = 'rgba(239, 68, 68, 0.3)';
                missionText.textContent = '–û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —Ç–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤!';
                convincePlayers.style.display = 'block';
                this.setupPlayersList();
                break;
                
            case 'green': // –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º
                missionType.textContent = '–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º';
                missionType.style.background = 'rgba(16, 185, 129, 0.3)';
                missionText.textContent = '–ü–æ–º–æ–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –µ–≥–æ –∑–∞–¥–∞–Ω–∏–µ–º!';
                helpOthers.style.display = 'block';
                this.setupHelpPlayers();
                break;
                
            case 'yellow': // –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
                missionType.textContent = '–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ';
                missionType.style.background = 'rgba(245, 158, 11, 0.3)';
                const event = GameData.getRandomEvent();
                missionText.textContent = `${event.title}\n\n${event.description}`;
                this.handleEvent(event);
                break;
        }
    }

    startTimer(seconds) {
        const timerElement = document.getElementById('missionTimer');
        let timeLeft = seconds;
        
        const timer = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const secs = timeLeft % 60;
            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            
            if (timeLeft <= 0) {
                clearInterval(timer);
                this.submitSolution(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            }
            
            timeLeft--;
        }, 1000);
        
        this.currentTimer = timer;
    }

    setupPlayersList() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        const playersList = document.getElementById('playersList');
        playersList.innerHTML = `
            <div class="player-item">üë®‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –ê–ª–µ–∫—Å–µ–π</div>
            <div class="player-item">üë©‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –ú–∞—Ä–∏—è</div>
            <div class="player-item">üë®‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –ò–≤–∞–Ω</div>
        `;
    }

    setupHelpPlayers() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å
        const select = document.getElementById('playerToHelp');
        select.innerHTML = `
            <option value="1">üë®‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –ê–ª–µ–∫—Å–µ–π - "–°–ª–æ–º–∞–ª—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä"</option>
            <option value="2">üë©‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –ú–∞—Ä–∏—è - "–ì—Ä—É—Å—Ç–Ω—ã–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ"</option>
            <option value="3">üë®‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –ò–≤–∞–Ω - "–ü–æ—Ç–µ—Ä—è–ª–∞—Å—å –∫–∞—Ä—Ç–∞"</option>
        `;
    }

    handleEvent(event) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        setTimeout(() => {
            let starsEarned = 0;
            let message = '';
            
            switch(event.type) {
                case 'positive':
                    starsEarned = event.title.includes('+3') ? 3 : event.title.includes('+2') ? 2 : 1;
                    message = `–¢—ã –ø–æ–ª—É—á–∞–µ—à—å ${starsEarned} –∑–≤–µ–∑–¥—É(—ã) –∑–∞ ${event.title.toLowerCase()}`;
                    break;
                    
                case 'challenge':
                    if (event.effect.includes('–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞')) {
                        message = '–¢—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å —Ö–æ–¥, –Ω–æ –ø—Ä–∏–¥—É–º–∞–ª –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏! +1 –∑–≤–µ–∑–¥–∞';
                        starsEarned = 1;
                    } else if (event.effect.includes('–û—Ç–∫–∞—Ç')) {
                        this.gameState.currentPosition = Math.max(0, this.gameState.currentPosition - 2);
                        this.updateRocketPosition();
                        message = '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –≤–µ—Ç–µ—Ä –æ—Ç–±—Ä–æ—Å–∏–ª —Ç–µ–±—è –Ω–∞ 2 –ø–ª–∞–Ω–µ—Ç—ã –Ω–∞–∑–∞–¥!';
                    }
                    break;
            }
            
            if (starsEarned > 0) {
                this.gameState.stars += starsEarned;
                this.showResult(starsEarned, message);
            } else {
                this.continueGame();
            }
        }, 3000);
    }

    submitSolution() {
        const solution = document.getElementById('solutionInput').value;
        if (!solution.trim()) {
            alert('–û–ø–∏—à–∏ —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ!');
            return;
        }
        
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –±—ã–ª–∞ –±—ã —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏)
        const starsEarned = this.evaluateSolution(solution);
        const message = this.getFeedback(starsEarned);
        
        this.gameState.stars += starsEarned;
        this.showResult(starsEarned, message);
    }

    startPresentation() {
        const starsEarned = 2; // –ó–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤—Å–µ–≥–¥–∞ 2 –∑–≤–µ–∑–¥—ã
        const message = '–¢—ã —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫–∞–∑–∞–ª –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!';
        
        this.gameState.stars += starsEarned;
        this.showResult(starsEarned, message);
    }

    submitHelp() {
        const helpText = document.getElementById('helpText').value;
        if (!helpText.trim()) {
            alert('–û–ø–∏—à–∏, —á–µ–º —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å!');
            return;
        }
        
        const starsEarned = 1; // –ó–∞ –ø–æ–º–æ—â—å –≤—Å–µ–≥–¥–∞ 1 –∑–≤–µ–∑–¥–∞
        const message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –¥—Ä—É–≥–æ–º—É –∫–æ—Å–º–æ–Ω–∞–≤—Ç—É!';
        
        this.gameState.stars += starsEarned;
        this.showResult(starsEarned, message);
    }

    evaluateSolution(solution) {
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
        const lengthScore = Math.min(solution.length / 50, 2); // –ú–∞–∫—Å 2 –∑–≤–µ–∑–¥—ã –∑–∞ –¥–ª–∏–Ω—É
        const complexityBonus = solution.includes('!') || solution.includes('?') ? 0.5 : 0;
        
        return Math.min(Math.floor(lengthScore + complexityBonus), 3);
    }

    getFeedback(stars) {
        const feedbacks = {
            1: '–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –∑–≤–µ–∑–¥—É.',
            2: '–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 2 –∑–≤–µ–∑–¥—ã.',
            3: '–ë–ª–µ—Å—Ç—è—â–∞—è –∏–¥–µ—è! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 3 –∑–≤–µ–∑–¥—ã!'
        };
        return feedbacks[stars] || '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!';
    }

    showResult(starsEarned, message) {
        this.showScreen('result');
        
        document.getElementById('resultIcon').textContent = '‚≠ê'.repeat(Math.min(starsEarned, 3));
        document.getElementById('resultTitle').textContent = starsEarned > 0 ? '–£—Å–ø–µ—Ö!' : '–°–æ–±—ã—Ç–∏–µ';
        document.getElementById('resultText').textContent = message;
        document.getElementById('starsEarned').textContent = starsEarned > 0 ? `+${starsEarned} ‚≠ê` : '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–≤–µ–∑–¥
        this.updatePlayerInfo();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.completeGame(), 2000);
        }
    }

    continueGame() {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        document.getElementById('rollDiceBtn').disabled = false;
        this.showScreen('game');
    }

    completeGame() {
        this.playSound('winSound');
        this.showScreen('win');
        
        document.getElementById('winnerName').textContent = this.player.name;
        document.getElementById('winnerProfession').textContent = this.player.profession;
    }

    restartGame() {
        this.gameState = {
            currentPosition: 0,
            stars: 0,
            planets: GameData.createGameBoard(15),
            currentPlanet: null,
            diceValue: 0,
            gameStarted: true
        };
        
        this.renderGameBoard();
        this.updatePlayerInfo();
        this.updateRocketPosition();
        this.showScreen('game');
    }

    showScreen(screenName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        document.getElementById(screenName + 'Screen').classList.add('active');
        this.currentScreen = screenName;
    }

    playBackgroundMusic() {
        const music = document.getElementById('backgroundMusic');
        if (music) {
            music.volume = 0.3;
            music.play().catch(e => console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'));
        }
    }

    playSound(soundId) {
        const sound = document.getElementById(soundId);
        if (sound) {
            sound.volume = 0.5;
            sound.play().catch(e => console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫'));
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É...');
    window.game = new CosmicProfessionGame();
});
