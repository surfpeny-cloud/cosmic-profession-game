// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥
class AchievementSystem {
    constructor() {
        this.achievements = new Map();
        this.unlockedAchievements = new Set();
        this.initAchievements();
    }

    initAchievements() {
        // –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.addAchievement({
            id: 'first_launch',
            name: 'üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫',
            description: '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
            category: 'exploration',
            icon: 'üöÄ',
            points: 10,
            requirement: (player) => player.totalGames >= 1,
            hidden: false
        });

        this.addAchievement({
            id: 'planet_explorer',
            name: 'ü™ê –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞–Ω–µ—Ç',
            description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç',
            category: 'exploration',
            icon: 'ü™ê',
            points: 25,
            requirement: (player) => player.visitedPlanets?.length >= 5,
            hidden: false
        });

        this.addAchievement({
            id: 'galaxy_traveler',
            name: 'üåå –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≥–∞–ª–∞–∫—Ç–∏–∫–∏',
            description: '–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—Å–µ 15 –ø–ª–∞–Ω–µ—Ç',
            category: 'exploration',
            icon: 'üåå',
            points: 100,
            requirement: (player) => player.visitedPlanets?.length >= 15,
            hidden: false
        });

        // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.addAchievement({
            id: 'first_profession',
            name: 'üéì –ü–µ—Ä–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è',
            description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é',
            category: 'profession',
            icon: 'üéì',
            points: 15,
            requirement: (player) => player.professionsCreated >= 1,
            hidden: false
        });

        this.addAchievement({
            id: 'master_of_trades',
            name: 'üëë –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–π',
            description: '–°–æ–∑–¥–∞–π—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π',
            category: 'profession',
            icon: 'üëë',
            points: 75,
            requirement: (player) => player.uniqueProfessions >= 10,
            hidden: false
        });

        this.addAchievement({
            id: 'innovator',
            name: 'üí° –ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä',
            description: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é',
            category: 'profession',
            icon: 'üí°',
            points: 50,
            requirement: (player) => player.currentProfession?.creativity >= 90,
            hidden: true
        });

        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.addAchievement({
            id: 'team_player',
            name: 'ü§ù –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫',
            description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 3 –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã–µ —Å–µ—Å—Å–∏–∏',
            category: 'social',
            icon: 'ü§ù',
            points: 30,
            requirement: (player) => player.multiplayerSessions >= 3,
            hidden: false
        });

        this.addAchievement({
            id: 'helper',
            name: 'üåü –ü–æ–º–æ—â–Ω–∏–∫',
            description: '–ü–æ–º–æ–≥–∏—Ç–µ 5 –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º',
            category: 'social',
            icon: 'üåü',
            points: 40,
            requirement: (player) => player.playersHelped >= 5,
            hidden: false
        });

        this.addAchievement({
            id: 'diplomat',
            name: 'üïäÔ∏è –î–∏–ø–ª–æ–º–∞—Ç',
            description: '–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫—Ä–∞—Å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö',
            category: 'social',
            icon: 'üïäÔ∏è',
            points: 60,
            requirement: (player) => player.redPlanetsCompleted >= 8,
            hidden: false
        });

        // –ó–≤–µ–∑–¥–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.addAchievement({
            id: 'star_collector',
            name: '‚≠ê –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∑–≤–µ–∑–¥',
            description: '–°–æ–±–µ—Ä–∏—Ç–µ 50 –∑–≤–µ–∑–¥ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏',
            category: 'special',
            icon: '‚≠ê',
            points: 50,
            requirement: (player) => player.totalStars >= 50,
            hidden: false
        });

        this.addAchievement({
            id: 'cosmic_rich',
            name: 'üíé –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–æ–≥–∞—á',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤',
            category: 'special',
            icon: 'üíé',
            points: 80,
            requirement: (player) => player.totalCrystals >= 1000,
            hidden: false
        });

        this.addAchievement({
            id: 'speed_runner',
            name: '‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±–µ–≥—É–Ω',
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10 —Ö–æ–¥–æ–≤',
            category: 'special',
            icon: '‚ö°',
            points: 100,
            requirement: (player) => player.fastestVictory <= 10,
            hidden: true
        });

        this.addAchievement({
            id: 'perfectionist',
            name: 'üéØ –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º',
            category: 'special',
            icon: 'üéØ',
            points: 150,
            requirement: (player) => player.perfectMissions >= 20,
            hidden: true
        });

        // –£—Ä–æ–≤–Ω–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        for (let i = 1; i <= 10; i++) {
            this.addAchievement({
                id: `level_${i}`,
                name: `üìà –£—Ä–æ–≤–µ–Ω—å ${i}`,
                description: `–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ ${i} —É—Ä–æ–≤–Ω—è`,
                category: 'special',
                icon: 'üìà',
                points: i * 10,
                requirement: (player) => player.level >= i,
                hidden: false
            });
        }
    }

    addAchievement(achievement) {
        this.achievements.set(achievement.id, achievement);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements(playerData) {
        const newlyUnlocked = [];
        
        for (const [id, achievement] of this.achievements) {
            if (!this.unlockedAchievements.has(id) && achievement.requirement(playerData)) {
                this.unlockAchievement(id, playerData);
                newlyUnlocked.push(achievement);
            }
        }
        
        return newlyUnlocked;
    }

    async unlockAchievement(achievementId, playerData) {
        const achievement = this.achievements.get(achievementId);
        if (!achievement) return;

        this.unlockedAchievements.add(achievementId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (window.gameDatabase) {
            await window.gameDatabase.unlockAchievement(playerData.telegramId, achievementId);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showAchievementNotification(achievement);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        this.updatePlayerStats(playerData, achievement);

        console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}`);
    }

    showAchievementNotification(achievement) {
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="achievement-popup">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-content">
                    <div class="achievement-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
                    <div class="achievement-name">${achievement.name}</div>
                    <div class="achievement-description">${achievement.description}</div>
                    <div class="achievement-points">+${achievement.points} –æ—á–∫–æ–≤</div>
                </div>
                <div class="achievement-glow"></div>
            </div>
        `;

        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => notification.classList.add('show'), 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 500);
        }, 4000);
    }

    updatePlayerStats(playerData, achievement) {
        playerData.achievementPoints = (playerData.achievementPoints || 0) + achievement.points;
        playerData.achievementsUnlocked = (playerData.achievementsUnlocked || 0) + 1;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
    getAchievementProgress(achievementId, playerData) {
        const achievement = this.achievements.get(achievementId);
        if (!achievement) return 0;

        // –î–ª—è —Å–∫—Ä—ã—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if (achievement.hidden && !this.unlockedAchievements.has(achievementId)) {
            return 0;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        return achievement.requirement(playerData) ? 100 : 25;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getAchievementsByCategory(category) {
        return Array.from(this.achievements.values())
            .filter(achievement => category === 'all' || achievement.category === category)
            .sort((a, b) => a.points - b.points);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getAchievementsStats() {
        const total = this.achievements.size;
        const unlocked = this.unlockedAchievements.size;
        const totalPoints = Array.from(this.unlockedAchievements)
            .reduce((sum, id) => sum + (this.achievements.get(id)?.points || 0), 0);

        return {
            total,
            unlocked,
            locked: total - unlocked,
            completion: Math.round((unlocked / total) * 100),
            totalPoints
        };
    }
}

// –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
const achievementStyles = `
.achievement-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 10000;
    transform: translateX(400px);
    transition: transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.achievement-notification.show {
    transform: translateX(0);
}

.achievement-popup {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 15px;
    padding: 15px;
    color: white;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    min-width: 300px;
}

.achievement-glow {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    animation: achievementGlow 2s ease-in-out infinite;
}

.achievement-popup {
    display: flex;
    align-items: center;
    gap: 15px;
}

.achievement-icon {
    font-size: 2.5em;
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
}

.achievement-content {
    flex: 1;
}

.achievement-title {
    font-size: 0.8em;
    opacity: 0.8;
    margin-bottom: 2px;
}

.achievement-name {
    font-weight: bold;
    font-size: 1.1em;
    margin-bottom: 5px;
}

.achievement-description {
    font-size: 0.9em;
    opacity: 0.9;
    margin-bottom: 5px;
}

.achievement-points {
    font-size: 0.8em;
    color: #ffd93d;
    font-weight: bold;
}

@keyframes achievementGlow {
    0%, 100% { transform: rotate(0deg) scale(1); }
    50% { transform: rotate(180deg) scale(1.1); }
}

.achievements-grid-enhanced {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 15px;
    padding: 20px;
}

.achievement-card {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 15px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.achievement-card.locked {
    opacity: 0.6;
    filter: grayscale(0.8);
}

.achievement-card.unlocked {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.3) 0%, rgba(118, 75, 162, 0.3) 100%);
    border-color: rgba(102, 126, 234, 0.5);
}

.achievement-card.hidden {
    background: rgba(0, 0, 0, 0.3);
}

.achievement-header {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.achievement-icon {
    font-size: 2em;
}

.achievement-info {
    flex: 1;
}

.achievement-name {
    font-weight: bold;
    font-size: 1.1em;
    margin-bottom: 2px;
}

.achievement-points {
    color: #ffd93d;
    font-size: 0.9em;
    font-weight: bold;
}

.achievement-description {
    font-size: 0.9em;
    opacity: 0.9;
    margin-bottom: 10px;
}

.achievement-progress {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    height: 6px;
    overflow: hidden;
}

.achievement-progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #56ab2f, #a8e6cf);
    border-radius: 10px;
    transition: width 0.5s ease;
}

.achievement-card.hidden .achievement-description {
    color: #ccc;
    font-style: italic;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = achievementStyles;
document.head.appendChild(styleSheet);

window.achievementSystem = new AchievementSystem();
