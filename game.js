// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
class CosmicProfessionGame {
    constructor() {
        this.currentScreen = 'loadingScreen';
        this.player = null;
        this.gameState = {
            currentPosition: -1,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null,
            currentMission: null,
            crystals: 0,
            energy: 100,
            multiplayer: {
                sessionId: null,
                isHost: false,
                players: []
            }
        };
        this.planets = [];
        this.isCreativeSolution = false;
        this.timerInterval = null;
        this.playerLevel = 1;
        this.playerXP = 0;
        this.inventory = [];
        this.skills = {};
        this.achievements = [];
        this.gameMode = 'solo'; // solo, multiplayer, creative
        this.guild = null;
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã...');
        this.initTelegram();
        this.createGamePlanets();
        this.bindEvents();
        this.initEnhancedSystems();
        this.startLoadingAnimation();
    }

    initTelegram() {
        if (window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
            console.log('üì± Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É Telegram
            this.setTelegramTheme();
        }
    }

    setTelegramTheme() {
        if (window.Telegram.WebApp) {
            const theme = Telegram.WebApp.colorScheme;
            document.documentElement.setAttribute('data-theme', theme);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞ –∏–∑ Telegram
            const accentColor = Telegram.WebApp.themeParams.accent_color;
            if (accentColor) {
                document.documentElement.style.setProperty('--accent-color', `#${accentColor.toString(16)}`);
            }
        }
    }

    initEnhancedSystems() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (window.gameDatabase) {
            this.database = window.gameDatabase;
            console.log('üíæ –°–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (window.achievementSystem) {
            this.achievementSystem = window.achievementSystem;
            console.log('üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        if (window.multiplayerSystem) {
            this.multiplayerSystem = window.multiplayerSystem;
            console.log('üë• –°–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
        this.loadSavedGame();
    }

    async loadSavedGame() {
        if (this.database) {
            try {
                const telegramId = this.getTelegramId();
                const savedData = await this.database.loadPlayerData(telegramId);
                
                if (savedData) {
                    this.loadPlayerProgress(savedData);
                    console.log('üéÆ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞:', savedData.name);
                } else {
                    console.log('üéÆ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            }
        }
    }

    loadPlayerProgress(savedData) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if (savedData.name) {
            document.getElementById('playerName').value = savedData.name;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.playerLevel = savedData.level || 1;
        this.playerXP = savedData.xp || 0;
        this.gameState.stars = savedData.totalStars || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updatePlayerStatsPreview();
    }

    getTelegramId() {
        if (window.Telegram && Telegram.WebApp && Telegram.WebApp.initDataUnsafe && Telegram.WebApp.initDataUnsafe.user) {
            return Telegram.WebApp.initDataUnsafe.user.id.toString();
        }
        return 'local_player_' + Math.random().toString(36).substr(2, 9);
    }

    createGamePlanets() {
        this.planets = GAME_DATA.planets;
        console.log(`ü™ê –°–æ–∑–¥–∞–Ω–æ ${this.planets.length} –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è`);
    }

    bindEvents() {
        console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        document.getElementById('generateProfession').addEventListener('click', () => {
            this.generatePlayerProfession();
        });

        document.getElementById('startGame').addEventListener('click', () => {
            this.startGame();
        });

        // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
        document.querySelectorAll('.mode-card').forEach(card => {
            card.addEventListener('click', (e) => {
                this.selectGameMode(card.dataset.mode);
            });
        });

        // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('rollDice').addEventListener('click', () => {
            this.rollDice();
        });

        // –ó–∞–¥–∞–Ω–∏—è
        document.getElementById('completeMission').addEventListener('click', () => {
            this.showSolutionInput(false);
        });

        document.getElementById('creativeSolution').addEventListener('click', () => {
            this.showSolutionInput(true);
        });

        document.getElementById('submitSolution').addEventListener('click', () => {
            this.completeMission();
        });

        document.getElementById('cancelSolution').addEventListener('click', () => {
            this.hideSolutionInput();
        });

        // –í–∫–ª–∞–¥–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchGameTab(e.target.dataset.tab);
            });
        });

        // –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.mp-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.closest('.mp-tab').dataset.mptab;
                this.switchMultiplayerTab(tabName);
            });
        });

        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        document.getElementById('clearLog').addEventListener('click', () => {
            this.clearLog();
        });

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        document.getElementById('restartGame').addEventListener('click', () => {
            this.restartGame();
        });

        // –ú–µ–Ω—é –∏–≥—Ä—ã
        document.getElementById('gameMenuBtn').addEventListener('click', () => {
            this.showGameMenu();
        });

        // –ü–ª–∞–≤–∞—é—â–∏–µ labels
        const floatingInput = document.getElementById('playerName');
        if (floatingInput) {
            floatingInput.addEventListener('input', this.handleFloatingLabel.bind(this));
            floatingInput.addEventListener('focus', this.handleFloatingLabel.bind(this));
            floatingInput.addEventListener('blur', this.handleFloatingLabel.bind(this));
        }

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        document.getElementById('mainSkill').addEventListener('change', () => {
            this.updateProfessionPreview();
        });

        document.getElementById('interestArea').addEventListener('change', () => {
            this.updateProfessionPreview();
        });

        console.log('‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    handleFloatingLabel(event) {
        const input = event.target;
        const label = input.nextElementSibling;
        if (input.value && input.value.trim() !== '' || event.type === 'focus') {
            label.classList.add('filled');
        } else if (event.type === 'blur' && !input.value.trim()) {
            label.classList.remove('filled');
        }
    }

    startLoadingAnimation() {
        let progress = 0;
        const progressFill = document.getElementById('loadingProgress');
        const progressText = document.querySelector('.progress-text');
        
        const tips = [
            "üí° –û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π!",
            "üåå –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            "üë• –í –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –º–æ–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º",
            "üéØ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥",
            "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–∏—é wisely –¥–ª—è –æ—Å–æ–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"
        ];
        
        const tipElement = document.querySelector('.loading-tips .tip');
        
        const interval = setInterval(() => {
            progress += 2;
            progressFill.style.width = `${progress}%`;
            progressText.textContent = `${progress}%`;
            
            // –ú–µ–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∂–¥—ã–µ 20%
            if (progress % 20 === 0) {
                const randomTip = tips[Math.floor(Math.random() * tips.length)];
                if (tipElement) {
                    tipElement.textContent = randomTip;
                }
            }
            
            if (progress >= 100) {
                clearInterval(interval);
                setTimeout(() => {
                    this.showScreen('modeScreen');
                    this.updatePlayerStatsPreview();
                }, 500);
            }
        }, 40);
    }

    updatePlayerStatsPreview() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        document.getElementById('totalGames').textContent = '0';
        document.getElementById('totalStars').textContent = this.gameState.stars.toString();
        document.getElementById('achievementsCount').textContent = '0';
        document.getElementById('uniqueProfessions').textContent = '0';
    }

    selectGameMode(mode) {
        this.gameMode = mode;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        document.querySelectorAll('.mode-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.querySelector(`[data-mode="${mode}"]`).classList.add('selected');
        
        console.log(`üéÆ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: ${mode}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        setTimeout(() => {
            this.showScreen('characterScreen');
        }, 500);
    }

    updateProfessionPreview() {
        const skill = document.getElementById('mainSkill').value;
        const interest = document.getElementById('interestArea').value;
        
        if (skill && interest) {
            const profession = this.generateEnhancedProfession(skill, interest);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
            document.getElementById('previewProfessionName').textContent = profession.fullName;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.updateStatBars(profession.stats);
        }
    }

    updateStatBars(stats) {
        Object.keys(stats).forEach(stat => {
            const fillElement = document.querySelector(`[data-stat="${stat}"]`);
            if (fillElement) {
                fillElement.style.width = `${stats[stat]}%`;
            }
        });
    }

    generateEnhancedProfession(skill, interest, specialization = null) {
        const baseProfession = GameUtils.generateProfession(skill, interest);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const stats = {
            creativity: this.calculateStat('creativity', skill, interest),
            technology: this.calculateStat('technology', skill, interest),
            communication: this.calculateStat('communication', skill, interest),
            research: this.calculateStat('research', skill, interest)
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        const abilities = this.generateAbilities(skill, interest);

        return {
            ...baseProfession,
            stats: stats,
            abilities: abilities,
            level: 1,
            xp: 0,
            specialization: specialization
        };
    }

    calculateStat(stat, skill, interest) {
        const skillModifiers = {
            '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ': { creativity: 80, technology: 20, communication: 40, research: 30 },
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': { creativity: 40, technology: 90, communication: 30, research: 60 },
            '–ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º': { creativity: 30, technology: 20, communication: 85, research: 25 },
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è': { creativity: 35, technology: 40, communication: 30, research: 90 },
            '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ': { creativity: 85, technology: 25, communication: 45, research: 35 },
            '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': { creativity: 30, technology: 35, communication: 75, research: 40 }
        };

        const interestModifiers = {
            '–∂–∏–≤–æ—Ç–Ω—ã–µ': { creativity: 20, technology: 10, communication: 60, research: 50 },
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': { creativity: 30, technology: 80, communication: 20, research: 60 },
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': { creativity: 85, technology: 15, communication: 40, research: 20 },
            '–ø—Ä–∏—Ä–æ–¥–∞': { creativity: 45, technology: 20, communication: 30, research: 65 },
            '–∫–æ—Å–º–æ—Å': { creativity: 35, technology: 50, communication: 25, research: 70 },
            '–º—É–∑—ã–∫–∞': { creativity: 75, technology: 25, communication: 55, research: 15 }
        };

        const skillStats = skillModifiers[skill] || { creativity: 50, technology: 50, communication: 50, research: 50 };
        const interestStats = interestModifiers[interest] || { creativity: 50, technology: 50, communication: 50, research: 50 };
        
        // –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–≤—ã–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
        return Math.round((skillStats[stat] + interestStats[stat]) / 2);
    }

    generateAbilities(skill, interest) {
        const abilities = [];
        
        // –ë–∞–∑–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        abilities.push({
            id: 'cosmic_intuition',
            name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è',
            description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö',
            effect: 'creative_bonus',
            value: 15,
            cooldown: 3,
            icon: 'üí´'
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        const combination = `${skill}_${interest}`;
        
        const specialAbilities = {
            '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ_—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': {
                name: '–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ 3D –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–æ–µ–∫—Ü–∏–π –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ',
                effect: 'tech_boost',
                value: 25,
                icon: 'üë®‚Äçüé®'
            },
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ_–∏—Å–∫—É—Å—Å—Ç–≤–æ': {
                name: '–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞',
                effect: 'creative_tech',
                value: 20,
                icon: 'üé®'
            },
            '–ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º_–∂–∏–≤–æ—Ç–Ω—ã–µ': {
                name: '–ó–æ–æ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
                description: '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏',
                effect: 'animal_bond',
                value: 30,
                icon: 'üêæ'
            },
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è_–∫–æ—Å–º–æ—Å': {
                name: '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
                description: '–ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —è–≤–ª–µ–Ω–∏–π –∏ –∑–∞–∫–æ–Ω–æ–≤',
                effect: 'research_boost',
                value: 35,
                icon: 'üî≠'
            }
        };

        if (specialAbilities[combination]) {
            abilities.push({
                id: combination,
                ...specialAbilities[combination]
            });
        }

        return abilities;
    }

    generatePlayerProfession() {
        const name = document.getElementById('playerName').value.trim();
        const skill = document.getElementById('mainSkill').value;
        const interest = document.getElementById('interestArea').value;

        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { name, skill, interest });

        if (!name) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞!', 'error');
            return;
        }

        if (!skill) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤—ã–∫!', 'error');
            return;
        }

        if (!interest) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!', 'error');
            return;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const profession = this.generateEnhancedProfession(skill, interest);
        
        this.player = {
            name: name,
            profession: profession,
            skill: skill,
            interest: interest,
            telegramId: this.getTelegramId(),
            created: new Date().toISOString()
        };

        console.log('üéì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:', profession);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultDiv = document.getElementById('professionResult');
        document.getElementById('professionName').textContent = profession.fullName;
        document.getElementById('professionDescription').textContent = profession.description;
        document.getElementById('professionSkill').textContent = this.getSkillDisplayName(skill);
        document.getElementById('professionInterest').textContent = this.getInterestDisplayName(interest);
        
        resultDiv.style.display = 'block';
        resultDiv.style.animation = 'slideUp 0.5s ease-out';

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
        document.getElementById('startGame').disabled = false;

        this.showNotification(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è "${profession.fullName}" —Å–æ–∑–¥–∞–Ω–∞!`, 'success');
    }

    getSkillDisplayName(skill) {
        const names = {
            '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ': 'üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ',
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
            '–ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º': 'ü§ù –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å',
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è': 'üî≠ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞',
            '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ': '‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
            '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': 'üìä –°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'
        };
        return names[skill] || skill;
    }

    getInterestDisplayName(interest) {
        const names = {
            '–∂–∏–≤–æ—Ç–Ω—ã–µ': 'üêæ –õ—é–±–æ–≤—å –∫ –∂–∏–≤–æ—Ç–Ω—ã–º',
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'ü§ñ –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': 'üé≠ –¢—è–≥–∞ –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É',
            '–ø—Ä–∏—Ä–æ–¥–∞': 'üåø –°–≤—è–∑—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π',
            '–∫–æ—Å–º–æ—Å': 'üöÄ –°—Ç—Ä–∞—Å—Ç—å –∫ –∫–æ—Å–º–æ—Å—É',
            '–º—É–∑–∏–∫–∞': 'üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–æ—Å—Ç—å'
        };
        return names[interest] || interest;
    }

    startGame() {
        if (!this.player) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!', 'error');
            return;
        }

        console.log('üéÆ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –¥–ª—è:', this.player.name);
        
        this.gameState.startTime = new Date();
        this.gameState.currentPosition = -1;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ä–µ–∂–∏–º
        if (this.gameMode === 'multiplayer') {
            this.initializeMultiplayer();
        }

        this.updateGameDisplay();
        this.showScreen('gameScreen');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DOM
        setTimeout(() => {
            this.renderGameMap();
        }, 100);
        
        this.addLogMessage(`üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –°–¢–ê–†–¢! –ö–æ—Ä–∞–±–ª—å "${this.player.name}" –Ω–∞—á–∞–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!`);
        this.addLogMessage(`üéØ –í–∞—à–∞ –º–∏—Å—Å–∏—è: —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º ${this.player.profession.fullName} –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π!`);
        this.addLogMessage(`üåå –†–µ–∂–∏–º –∏–≥—Ä—ã: ${this.getGameModeText()}`);
        this.addLogMessage(`‚≠ê –°–æ–±–µ—Ä–∏—Ç–µ 10 –∑–≤–µ–∑–¥ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏.`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
        this.saveGameProgress();
        
        this.showNotification('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞.', 'success');
    }

    getGameModeText() {
        const modes = {
            'solo': '–û–¥–∏–Ω–æ—á–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
            'multiplayer': '–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä',
            'creative': '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º'
        };
        return modes[this.gameMode] || '–û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞';
    }

    initializeMultiplayer() {
        if (this.multiplayerSystem) {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–µ—Å—Å–∏–∏
            console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞...');
        }
    }

    renderGameMap() {
        const container = document.getElementById('planetsContainer');
        if (!container) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç planetsContainer –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        container.innerHTML = '';

        this.planets.forEach((planet, index) => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.innerHTML = planet.icon;
            planetElement.title = `${planet.name}\n${planet.description}`;
            planetElement.setAttribute('data-planet-id', planet.id);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
            if (this.gameState.visitedPlanets.includes(planet.id)) {
                planetElement.classList.add('visited');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã
            if (index === this.gameState.currentPosition) {
                planetElement.classList.add('current');
            }
            
            container.appendChild(planetElement);
        });

        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞, –ø–ª–∞–Ω–µ—Ç:', this.planets.length);
        this.updatePlayerPosition();
    }

    updatePlayerPosition() {
        const marker = document.getElementById('playerMarker');
        const planets = document.querySelectorAll('.planet');
        
        console.log('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:', this.gameState.currentPosition);
        
        if (this.gameState.currentPosition >= 0 && planets[this.gameState.currentPosition]) {
            const planetRect = planets[this.gameState.currentPosition].getBoundingClientRect();
            const containerRect = document.querySelector('.planets-container').getBoundingClientRect();
            
            const leftPosition = planetRect.left - containerRect.left + planetRect.width/2 - 20;
            const topPosition = planetRect.top - containerRect.top - 25;
            
            marker.style.left = `${leftPosition}px`;
            marker.style.top = `${topPosition}px`;
            
            console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { left: leftPosition, top: topPosition });
        } else {
            // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
            marker.style.left = '20px';
            marker.style.top = '50%';
            marker.style.transform = 'translateY(-50%)';
        }
    }

    rollDice() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if (this.gameState.energy < 10) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.', 'error');
            return;
        }

        const diceBtn = document.getElementById('rollDice');
        diceBtn.disabled = true;

        console.log('üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É–±–∏–∫–∞...');

        // –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
        this.gameState.energy -= 10;
        this.updateGameDisplay();

        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const diceResult = document.getElementById('diceResult');
        diceResult.textContent = 'üé≤';
        diceResult.style.animation = 'none';
        void diceResult.offsetWidth; // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        diceResult.style.animation = 'diceRoll 0.8s ease-out';

        setTimeout(() => {
            const roll = Math.floor(Math.random() * 6) + 1;
            diceResult.textContent = this.getDiceEmoji(roll);
            console.log('‚úÖ –í—ã–ø–∞–ª–æ:', roll);
            
            this.movePlayer(roll);
            
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
            setTimeout(() => {
                diceBtn.disabled = false;
            }, 1000);
            
        }, 800);
    }

    getDiceEmoji(number) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[number - 1] || 'üé≤';
    }

    movePlayer(steps) {
        this.addLogMessage(`üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞: –≤—ã–ø–∞–ª–æ ${steps}`);

        const newPosition = this.gameState.currentPosition + steps;
        const maxPosition = this.planets.length - 1;

        console.log(`üîÑ –î–≤–∏–∂–µ–Ω–∏–µ: —Å ${this.gameState.currentPosition} –Ω–∞ ${newPosition}`);

        if (newPosition > maxPosition) {
            this.gameState.currentPosition = maxPosition;
            this.addLogMessage('üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞!');
            this.reachFinalPlanet();
        } else {
            this.gameState.currentPosition = newPosition;
            this.arriveAtPlanet();
        }

        this.renderGameMap(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
        this.updateGameDisplay();
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        this.startEnergyRecovery();
    }

    startEnergyRecovery() {
        // –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        const recoveryInterval = setInterval(() => {
            if (this.gameState.energy < 100) {
                this.gameState.energy += 5;
                if (this.gameState.energy > 100) this.gameState.energy = 100;
                this.updateGameDisplay();
            } else {
                clearInterval(recoveryInterval);
            }
        }, 30000); // +5 —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    arriveAtPlanet() {
        const currentPlanet = this.planets[this.gameState.currentPosition];
        
        console.log('ü™ê –ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É:', currentPlanet);
        
        this.addLogMessage(`ü™ê –ü–†–ò–ë–´–¢–ò–ï –ù–ê –ü–õ–ê–ù–ï–¢–£: ${currentPlanet.name}`);
        this.addLogMessage(`üìñ ${currentPlanet.description}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–µ—Ç—É –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
        if (!this.gameState.visitedPlanets.includes(currentPlanet.id)) {
            this.gameState.visitedPlanets.push(currentPlanet.id);
            
            // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–ª–∞–Ω–µ—Ç—ã
            this.gameState.crystals += 10;
            this.addLogMessage(`üíé –ù–∞–π–¥–µ–Ω–æ 10 –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!`);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏—è
        setTimeout(() => {
            this.showMissionScreen(currentPlanet);
        }, 1000);
    }

    showMissionScreen(planet) {
        const mission = GameUtils.generateMission(planet.type, this.player.profession);
        this.gameState.currentMission = mission;
        
        console.log('üìã –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è:', mission);
        
        document.getElementById('missionPlanetIcon').textContent = planet.icon;
        document.getElementById('missionPlanetName').textContent = planet.name;
        document.getElementById('missionPlanetType').textContent = planet.description;
        
        document.getElementById('missionTypeBadge').innerHTML = `
            <span id="missionTypeIcon">${mission.icon || 'üåå'}</span>
            <span id="missionTypeText">${mission.name}</span>
        `;
        document.getElementById('missionTypeBadge').className = `mission-type-badge ${mission.color}`;
        
        document.getElementById('missionText').textContent = mission.text;
        document.getElementById('missionProfession').textContent = this.player.profession.fullName;

        // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById('missionTimer').textContent = GameUtils.formatTime(mission.time);
        document.getElementById('solutionInput').style.display = 'none';
        document.getElementById('solutionText').value = '';
        document.getElementById('timerFill').style.width = '100%';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –±—ã–ª
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        this.startMissionTimer(mission.time);
        this.showScreen('missionScreen');
        
        this.addLogMessage(`üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${mission.name}`);
    }

    startMissionTimer(seconds) {
        this.timerSeconds = seconds;
        const totalSeconds = seconds;
        const timerFill = document.getElementById('timerFill');
        
        this.timerInterval = setInterval(() => {
            this.timerSeconds--;
            document.getElementById('missionTimer').textContent = GameUtils.formatTime(this.timerSeconds);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if (timerFill) {
                const progress = (this.timerSeconds / totalSeconds) * 100;
                timerFill.style.width = `${progress}%`;
                
                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –º–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏
                if (this.timerSeconds <= 30) {
                    timerFill.style.background = 'linear-gradient(135deg, #ff6b6b 0%, #ff8e53 100%)';
                } else if (this.timerSeconds <= 60) {
                    timerFill.style.background = 'linear-gradient(135deg, #ffd93d 0%, #ff9a3d 100%)';
                }
            }
            
            if (this.timerSeconds <= 0) {
                clearInterval(this.timerInterval);
                this.timeOutMission();
            }
        }, 1000);
    }

    timeOutMission() {
        this.addLogMessage('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.');
        this.showNotification('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.', 'error');
        this.showScreen('gameScreen');
    }

    showSolutionInput(isCreative = false) {
        this.isCreativeSolution = isCreative;
        const solutionInput = document.getElementById('solutionInput');
        const solutionType = document.getElementById('solutionType');
        
        solutionInput.style.display = 'block';
        solutionType.textContent = isCreative ? '‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ' : '‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ';
        
        if (isCreative) {
            this.addLogMessage('‚ú® –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è!');
            this.showNotification('–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!', 'success');
        }
    }

    hideSolutionInput() {
        document.getElementById('solutionInput').style.display = 'none';
        document.getElementById('solutionText').value = '';
    }

    async completeMission() {
        const solution = document.getElementById('solutionText').value.trim();
        
        if (!solution) {
            this.showNotification('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ!', 'error');
            return;
        }

        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        const currentPlanet = this.planets[this.gameState.currentPosition];
        let starsEarned = await this.calculateMissionReward(currentPlanet);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        this.addXP(starsEarned * 10);

        this.gameState.stars += starsEarned;

        this.addLogMessage(`‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: ${starsEarned}`);
        this.addLogMessage(`üìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: ${this.gameState.stars}/10`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫–æ–ª—å—Ü–æ
        this.updateProgressRing();

        this.showNotification(`–ü–æ–ª—É—á–µ–Ω–æ ${starsEarned} ‚≠ê! –í—Å–µ–≥–æ: ${this.gameState.stars}/10`, 'success');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.checkAchievements();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await this.saveGameProgress(starsEarned);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 1500);
        } else {
            setTimeout(() => this.showScreen('gameScreen'), 1000);
        }
    }

    async calculateMissionReward(planet) {
        let baseStars = this.isCreativeSolution ? 2 : 1;

        // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const creativityBonus = Math.floor(this.player.profession.stats.creativity / 25);
        baseStars += creativityBonus;

        // –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–∏–ø –ø–ª–∞–Ω–µ—Ç—ã
        if (planet.type === 'red') {
            baseStars += 1;
            this.addLogMessage('üí¨ –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ! +1 –∑–≤–µ–∑–¥–∞');
        }
        
        if (planet.type === 'green') {
            baseStars += 1;
            this.addLogMessage('ü§ù –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–º–æ—â—å! +1 –∑–≤–µ–∑–¥–∞');
        }

        // –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
        const levelBonus = Math.floor(this.playerLevel / 3);
        baseStars += levelBonus;

        // –°–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å (—à–∞–Ω—Å 30%)
        if (Math.random() < 0.3) {
            baseStars += 1;
            this.addLogMessage('üéÅ –£–¥–∞—á–Ω—ã–π –±–æ–Ω—É—Å! +1 –∑–≤–µ–∑–¥–∞');
        }

        return Math.min(baseStars, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –∑–≤–µ–∑–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
    }

    addXP(amount) {
        this.playerXP += amount;
        
        const neededXP = this.getXPForLevel(this.playerLevel);
        if (this.playerXP >= neededXP) {
            this.levelUp();
        }

        this.updateGameDisplay();
    }

    getXPForLevel(level) {
        return level * 100; // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: 100 XP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    }

    levelUp() {
        this.playerLevel++;
        const oldXP = this.playerXP;
        this.playerXP = 0;

        this.addLogMessage(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${this.playerLevel} —É—Ä–æ–≤–Ω—è!`);
        this.showLevelUpAnimation();
        
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        this.gameState.crystals += this.playerLevel * 5;
        this.addLogMessage(`üíé –ü–æ–ª—É—á–µ–Ω–æ ${this.playerLevel * 5} –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!`);

        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        this.unlockLevelFeatures();
    }

    showLevelUpAnimation() {
        const animation = document.createElement('div');
        animation.className = 'level-up-animation';
        animation.innerHTML = `
            <div class="level-up-content">
                <div class="level-up-icon">üìà</div>
                <div class="level-up-text">–£—Ä–æ–≤–µ–Ω—å ${this.playerLevel}!</div>
                <div class="level-up-glow"></div>
            </div>
        `;
        
        document.body.appendChild(animation);
        
        setTimeout(() => {
            animation.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            animation.classList.remove('show');
            setTimeout(() => animation.remove(), 500);
        }, 3000);
    }

    unlockLevelFeatures() {
        const unlocks = {
            2: 'üéí –û—Ç–∫—Ä—ã—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è',
            3: 'üîß –î–æ—Å—Ç—É–ø–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
            5: 'üë• –û—Ç–∫—Ä—ã—Ç –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä',
            8: 'üöÄ –î–æ—Å—Ç—É–ø–Ω—ã –æ—Å–æ–±—ã–µ –∑–∞–¥–∞–Ω–∏—è'
        };

        if (unlocks[this.playerLevel]) {
            this.addLogMessage(`üîì ${unlocks[this.playerLevel]}`);
            this.showNotification(unlocks[this.playerLevel], 'success');
        }
    }

    updateProgressRing() {
        const progressCircle = document.getElementById('progressCircle');
        if (progressCircle) {
            const circumference = 125.6; // 2 * œÄ * r
            const progress = (this.gameState.stars / 10) * circumference;
            progressCircle.style.strokeDashoffset = circumference - progress;
        }
    }

    reachFinalPlanet() {
        this.addLogMessage('üéØ –í–´ –î–û–°–¢–ò–ì–õ–ò –§–ò–ù–ê–õ–¨–ù–û–ô –ü–õ–ê–ù–ï–¢–´!');
        
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 2000);
        } else {
            this.addLogMessage('‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–±–µ–¥—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è.');
            this.showNotification('–°–æ–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!', 'info');
        }
    }

    showVictoryScreen() {
        const timePlayed = Math.floor((new Date() - this.gameState.startTime) / 1000);
        const minutes = Math.floor(timePlayed / 60);
        const seconds = timePlayed % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        document.getElementById('victoryProfession').textContent = this.player.profession.fullName;
        document.getElementById('victoryStars').textContent = this.gameState.stars;
        document.getElementById('victoryTime').textContent = timeString;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        if (window.GameAnimations) {
            GameAnimations.createConfetti();
        }
        
        this.showScreen('victoryScreen');
        this.addLogMessage('üéâ –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –ü–û–ë–ï–î–ê! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥—ã
        this.saveVictoryStats();
        
        this.showNotification('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! –í—ã —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!', 'success');
    }

    async saveVictoryStats() {
        if (this.database) {
            const playerData = {
                telegramId: this.getTelegramId(),
                name: this.player.name,
                totalGames: 1,
                totalStars: this.gameState.stars,
                level: this.playerLevel,
                currentProfession: this.player.profession,
                uniqueProfessions: [this.player.profession],
                victories: 1,
                totalPlayTime: Math.floor((new Date() - this.gameState.startTime) / 1000),
                lastPlayed: new Date().toISOString()
            };

            await this.database.savePlayerData(playerData);
        }
    }

    checkAchievements() {
        if (this.achievementSystem) {
            const playerData = {
                totalGames: 1,
                visitedPlanets: this.gameState.visitedPlanets,
                professionsCreated: 1,
                uniqueProfessions: 1,
                currentProfession: this.player.profession,
                totalStars: this.gameState.stars,
                level: this.playerLevel,
                // ... –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            };

            const newAchievements = this.achievementSystem.checkAchievements(playerData);
            if (newAchievements.length > 0) {
                console.log('üèÜ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', newAchievements.length);
            }
        }
    }

    switchGameTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });
        document.getElementById(`tab-${tabName}`).classList.add('active');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.loadTabContent(tabName);
    }

    loadTabContent(tabName) {
        switch (tabName) {
            case 'inventory':
                this.loadInventoryTab();
                break;
            case 'skills':
                this.loadSkillsTab();
                break;
            case 'multiplayer':
                this.loadMultiplayerTab();
                break;
            case 'achievements':
                this.loadAchievementsTab();
                break;
        }
    }

    loadInventoryTab() {
        const inventoryContainer = document.getElementById('tab-inventory');
        if (!inventoryContainer) return;

        inventoryContainer.innerHTML = `
            <div class="inventory-header">
                <h3>üéí –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                <div class="inventory-stats">
                    <span>üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: ${this.gameState.crystals}</span>
                    <span>‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${this.gameState.energy}/100</span>
                </div>
            </div>
            <div class="inventory-grid">
                ${this.generateInventoryItems()}
            </div>
            <div class="inventory-shop">
                <h4>üõí –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ú–∞–≥–∞–∑–∏–Ω</h4>
                <div class="shop-items">
                    <div class="shop-item">
                        <div class="item-icon">‚ö°</div>
                        <div class="item-info">
                            <div class="item-name">–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç</div>
                            <div class="item-description">+25 —ç–Ω–µ—Ä–≥–∏–∏</div>
                        </div>
                        <button class="btn btn-primary buy-btn" data-item="energy">üíé 15</button>
                    </div>
                    <div class="shop-item">
                        <div class="item-icon">üé≤</div>
                        <div class="item-info">
                            <div class="item-name">–£–¥–∞—á–Ω—ã–π –∫—É–±–∏–∫</div>
                            <div class="item-description">–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏–µ 4-6</div>
                        </div>
                        <button class="btn btn-primary buy-btn" data-item="lucky_dice">üíé 30</button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏
        inventoryContainer.querySelectorAll('.buy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.buyItem(e.target.dataset.item);
            });
        });
    }

    generateInventoryItems() {
        if (this.inventory.length === 0) {
            return `
                <div class="empty-inventory">
                    <div class="empty-icon">üéí</div>
                    <p>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>
                    <p class="empty-hint">–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ!</p>
                </div>
            `;
        }

        return this.inventory.map(item => `
            <div class="inventory-item ${item.isActive ? 'active' : ''}">
                <div class="item-icon">${item.icon}</div>
                <div class="item-info">
                    <div class="item-name">${item.name}</div>
                    <div class="item-description">${item.description}</div>
                </div>
                <div class="item-actions">
                    ${item.isActive ? 
                        '<button class="btn btn-secondary deactivate-btn">–í—ã–∫–ª</button>' : 
                        '<button class="btn btn-primary activate-btn">–í–∫–ª</button>'
                    }
                </div>
            </div>
        `).join('');
    }

    buyItem(itemId) {
        const prices = {
            'energy': 15,
            'lucky_dice': 30
        };

        const price = prices[itemId];
        if (!price) return;

        if (this.gameState.crystals >= price) {
            this.gameState.crystals -= price;
            
            const newItem = {
                id: itemId,
                name: this.getItemName(itemId),
                description: this.getItemDescription(itemId),
                icon: this.getItemIcon(itemId),
                isActive: false,
                purchased: new Date().toISOString()
            };

            this.inventory.push(newItem);
            this.updateGameDisplay();
            this.loadInventoryTab(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∫–ª–∞–¥–∫—É
            
            this.addLogMessage(`üõí –ö—É–ø–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${newItem.name}`);
            this.showNotification(`–ü—Ä–µ–¥–º–µ—Ç "${newItem.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!`, 'success');
        } else {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!', 'error');
        }
    }

    getItemName(itemId) {
        const names = {
            'energy': '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç',
            'lucky_dice': '–£–¥–∞—á–Ω—ã–π –∫—É–±–∏–∫'
        };
        return names[itemId] || '–ü—Ä–µ–¥–º–µ—Ç';
    }

    getItemDescription(itemId) {
        const descriptions = {
            'energy': '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 25 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏',
            'lucky_dice': '–°–ª–µ–¥—É—é—â–∏–π –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –±—É–¥–µ—Ç —É–¥–∞—á–Ω—ã–º'
        };
        return descriptions[itemId] || '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞';
    }

    getItemIcon(itemId) {
        const icons = {
            'energy': '‚ö°',
            'lucky_dice': 'üé≤'
        };
        return icons[itemId] || 'üì¶';
    }

    loadSkillsTab() {
        const skillsContainer = document.getElementById('tab-skills');
        if (!skillsContainer) return;

        skillsContainer.innerHTML = `
            <div class="skills-header">
                <h3>üéØ –ù–∞–≤—ã–∫–∏ –∏ –£–º–µ–Ω–∏—è</h3>
                <div class="skills-progress">
                    <span>–£—Ä–æ–≤–µ–Ω—å: ${this.playerLevel}</span>
                    <span>–û–ø—ã—Ç: ${this.playerXP}/${this.getXPForLevel(this.playerLevel)}</span>
                </div>
            </div>
            <div class="skills-tree">
                <div class="skill-category">
                    <h4>üí´ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</h4>
                    ${this.generateProfessionSkills()}
                </div>
                <div class="skill-category">
                    <h4>üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —É–º–µ–Ω–∏—è</h4>
                    ${this.generateCosmicSkills()}
                </div>
            </div>
        `;
    }

    generateProfessionSkills() {
        const skills = this.player.profession.abilities || [];
        return skills.map(ability => `
            <div class="skill-item unlocked">
                <div class="skill-icon">${ability.icon}</div>
                <div class="skill-info">
                    <div class="skill-name">${ability.name}</div>
                    <div class="skill-description">${ability.description}</div>
                </div>
                <div class="skill-level">–£—Ä. 1</div>
            </div>
        `).join('');
    }

    generateCosmicSkills() {
        const cosmicSkills = [
            { name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–∞–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è', level: 1, maxLevel: 5, icon: 'üß≠' },
            { name: '–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è', description: '–£—Å–∫–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π', level: 1, maxLevel: 3, icon: 'üåç' },
            { name: '–ó–≤–µ–∑–¥–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è', description: '–ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤', level: 1, maxLevel: 4, icon: 'üîÆ' }
        ];

        return cosmicSkills.map(skill => `
            <div class="skill-item ${skill.level > 0 ? 'unlocked' : 'locked'}">
                <div class="skill-icon">${skill.icon}</div>
                <div class="skill-info">
                    <div class="skill-name">${skill.name}</div>
                    <div class="skill-description">${skill.description}</div>
                </div>
                <div class="skill-level">–£—Ä. ${skill.level}/${skill.maxLevel}</div>
                ${skill.level < skill.maxLevel ? 
                    `<button class="btn btn-primary upgrade-btn" data-skill="${skill.name}">üíé 50</button>` : 
                    '<div class="skill-max">–ú–∞–∫—Å.</div>'
                }
            </div>
        `).join('');
    }

    loadMultiplayerTab() {
        const multiplayerContainer = document.getElementById('tab-multiplayer');
        if (!multiplayerContainer) return;

        multiplayerContainer.innerHTML = `
            <div class="multiplayer-lobby">
                <div class="mp-header">
                    <h3>üë• –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</h3>
                    <button class="btn btn-primary" onclick="game.showScreen('multiplayerScreen')">
                        –û—Ç–∫—Ä—ã—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
                    </button>
                </div>
                <div class="mp-status">
                    <p>–†–µ–∂–∏–º: ${this.getGameModeText()}</p>
                    <p>–î–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞</p>
                </div>
            </div>
        `;
    }

    loadAchievementsTab() {
        const achievementsContainer = document.getElementById('tab-achievements');
        if (!achievementsContainer) return;

        achievementsContainer.innerHTML = `
            <div class="achievements-preview">
                <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ</p>
                <button class="btn btn-primary" onclick="game.showScreen('achievementsScreen')">
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                </button>
            </div>
        `;
    }

    switchMultiplayerTab(tabName) {
        if (this.multiplayerSystem) {
            this.multiplayerSystem.switchMultiplayerTab(tabName);
        }
    }

    showGameMenu() {
        const menuHTML = `
            <div class="game-menu">
                <div class="menu-header">
                    <h3>‚öôÔ∏è –ú–µ–Ω—é –∏–≥—Ä—ã</h3>
                </div>
                <div class="menu-items">
                    <button class="menu-item" onclick="game.saveGameProgress()">
                        <span class="menu-icon">üíæ</span>
                        <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É</span>
                    </button>
                    <button class="menu-item" onclick="game.showScreen('achievementsScreen')">
                        <span class="menu-icon">üèÜ</span>
                        <span>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
                    </button>
                    <button class="menu-item" onclick="game.showScreen('multiplayerScreen')">
                        <span class="menu-icon">üë•</span>
                        <span>–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</span>
                    </button>
                    <button class="menu-item" onclick="game.showSettings()">
                        <span class="menu-icon">‚öôÔ∏è</span>
                        <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                    </button>
                    <button class="menu-item" onclick="game.restartGame()">
                        <span class="menu-icon">üîÑ</span>
                        <span>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</span>
                    </button>
                </div>
                <div class="menu-footer">
                    <button class="btn btn-secondary" onclick="game.hideGameMenu()">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        this.showModal(menuHTML);
    }

    hideGameMenu() {
        this.hideModal();
    }

    showSettings() {
        const settingsHTML = `
            <div class="settings-menu">
                <div class="menu-header">
                    <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                </div>
                <div class="settings-items">
                    <div class="setting-item">
                        <label>–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</label>
                        <input type="checkbox" checked>
                    </div>
                    <div class="setting-item">
                        <label>–ê–Ω–∏–º–∞—Ü–∏–∏</label>
                        <input type="checkbox" checked>
                    </div>
                    <div class="setting-item">
                        <label>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
                        <input type="checkbox" checked>
                    </div>
                </div>
                <div class="menu-footer">
                    <button class="btn btn-primary" onclick="game.hideModal()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button class="btn btn-secondary" onclick="game.hideModal()">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;

        this.showModal(settingsHTML);
    }

    showModal(content) {
        const overlay = document.getElementById('modalOverlay');
        const modalContent = document.querySelector('.modal-content');
        
        if (overlay && modalContent) {
            modalContent.innerHTML = content;
            overlay.style.display = 'flex';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                overlay.classList.add('show');
            }, 10);
        }
    }

    hideModal() {
        const overlay = document.getElementById('modalOverlay');
        if (overlay) {
            overlay.classList.remove('show');
            setTimeout(() => {
                overlay.style.display = 'none';
            }, 300);
        }
    }

    updateGameDisplay() {
        if (this.player) {
            document.getElementById('currentPlayerName').textContent = this.player.name;
            document.getElementById('currentProfession').textContent = this.player.profession.fullName;
            document.getElementById('starsCount').textContent = this.gameState.stars;
            document.getElementById('playerLevel').textContent = this.playerLevel;
            document.getElementById('crystalsCount').textContent = this.gameState.crystals;
            document.getElementById('energyCount').textContent = this.gameState.energy;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫–æ–ª—å—Ü–æ
            this.updateProgressRing();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
            const modeElement = document.getElementById('gameModeText');
            if (modeElement) {
                modeElement.textContent = this.getGameModeText();
            }
        }
    }

    addLogMessage(message) {
        const logContainer = document.getElementById('logMessages');
        if (!logContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'log-message';
        messageElement.innerHTML = `
            <span class="log-time">[${new Date().toLocaleTimeString()}]</span>
            <span class="log-text">${message}</span>
        `;
        
        logContainer.appendChild(messageElement);
        logContainer.scrollTop = logContainer.scrollHeight;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
        this.gameState.gameLog.push({
            time: new Date().toLocaleTimeString(),
            message: message
        });
        
        console.log('üìù –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω:', message);
    }

    clearLog() {
        const logContainer = document.getElementById('logMessages');
        if (logContainer) {
            logContainer.innerHTML = '';
            this.addLogMessage('üóëÔ∏è –ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!');
        }
    }

    async saveGameProgress(starsEarned = 0) {
        const saveData = {
            playerId: this.getTelegramId(),
            gameState: this.gameState,
            player: this.player,
            inventory: this.inventory,
            skills: this.skills,
            level: this.playerLevel,
            xp: this.playerXP,
            timestamp: new Date().toISOString(),
            starsEarned: starsEarned
        };

        if (this.database) {
            try {
                await this.database.saveGame(saveData);
                
                // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
                await this.updatePlayerStats();
                
                this.showNotification('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã', 'error');
            }
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            localStorage.setItem('cosmic_game_save', JSON.stringify(saveData));
            this.showNotification('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ', 'info');
        }
    }

    async updatePlayerStats() {
        const playerData = {
            telegramId: this.getTelegramId(),
            name: this.player.name,
            totalGames: 1,
            totalStars: this.gameState.stars,
            level: this.playerLevel,
            currentProfession: this.player.profession,
            uniqueProfessions: [this.player.profession],
            lastPlayed: new Date().toISOString()
        };

        if (this.database) {
            await this.database.savePlayerData(playerData);
        }
    }

    showScreen(screenName) {
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.hideModal();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenName);
        if (targetScreen) {
            targetScreen.classList.add('active');
            this.currentScreen = screenName;
            console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø–æ–∫–∞–∑–∞–Ω:', screenName);
        } else {
            console.error('‚ùå –≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenName);
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–æ–≤
        switch (screenName) {
            case 'gameScreen':
                setTimeout(() => {
                    this.updatePlayerPosition();
                    this.loadTabContent('map'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∫–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }, 200);
                break;
            case 'multiplayerScreen':
                if (this.multiplayerSystem) {
                    this.multiplayerSystem.updateMultiplayerContent('lobby');
                }
                break;
            case 'achievementsScreen':
                this.loadAchievementsScreen();
                break;
        }
    }

    loadAchievementsScreen() {
        if (this.achievementSystem) {
            const stats = this.achievementSystem.getAchievementsStats();
            document.getElementById('achievementsCompleted').textContent = stats.unlocked;
            
            const progress = document.getElementById('achievementsProgress');
            if (progress) {
                progress.style.width = `${stats.completion}%`;
            }
        }
    }

    showNotification(message, type = 'info') {
        if (window.GameUtils && GameUtils.showNotification) {
            GameUtils.showNotification(message, type);
        } else {
            // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            alert(`${type.toUpperCase()}: ${message}`);
        }
    }

    restartGame() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        
        const confirmRestart = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É? –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
        if (!confirmRestart) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        this.saveGameProgress();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.player = null;
        this.gameState = {
            currentPosition: -1,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null,
            currentMission: null,
            crystals: 0,
            energy: 100,
            multiplayer: {
                sessionId: null,
                isHost: false,
                players: []
            }
        };
        
        this.playerLevel = 1;
        this.playerXP = 0;
        this.inventory = [];
        this.isCreativeSolution = false;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('playerName').value = '';
        document.getElementById('mainSkill').value = '';
        document.getElementById('interestArea').value = '';
        
        const resultDiv = document.getElementById('professionResult');
        if (resultDiv) {
            resultDiv.style.display = 'none';
        }
        
        document.getElementById('startGame').disabled = true;
        
        const logContainer = document.getElementById('logMessages');
        if (logContainer) {
            logContainer.innerHTML = '';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        this.showScreen('modeScreen');
        this.showNotification('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.', 'info');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã...');
    window.game = new CosmicProfessionGame();
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const enhancedStyles = `
@keyframes levelUp {
    0% { transform: scale(0) rotate(0deg); opacity: 0; }
    50% { transform: scale(1.2) rotate(180deg); opacity: 1; }
    100% { transform: scale(1) rotate(360deg); opacity: 1; }
}

.level-up-animation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.5s ease;
}

.level-up-animation.show {
    opacity: 1;
}

.level-up-content {
    background: linear-gradient(135deg, rgba(255, 217, 61, 0.9) 0%, rgba(255, 154, 61, 0.9) 100%);
    border-radius: 20px;
    padding: 30px 40px;
    text-align: center;
    color: #333;
    font-weight: bold;
    position: relative;
    overflow: hidden;
    animation: levelUp 1s ease-out;
}

.level-up-icon {
    font-size: 3em;
    margin-bottom: 10px;
}

.level-up-text {
    font-size: 1.5em;
    font-family: 'Orbitron', sans-serif;
}

.level-up-glow {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, transparent 70%);
    animation: rotate 3s linear infinite;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.modal-overlay.show {
    opacity: 1;
}

.modal-content {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    border-radius: 20px;
    padding: 0;
    max-width: 90%;
    max-height: 80%;
    overflow: auto;
    border: 2px solid rgba(102, 126, 234, 0.5);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal-overlay.show .modal-content {
    transform: scale(1);
}

.game-menu, .settings-menu {
    padding: 20px;
}

.menu-header {
    text-align: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.menu-items {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
}

.menu-item {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    text-align: left;
}

.menu-item:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateX(5px);
}

.menu-icon {
    font-size: 1.2em;
    width: 30px;
    text-align: center;
}

.menu-footer {
    display: flex;
    gap: 10px;
    justify-content: center;
}

.settings-items {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 20px;
}

.setting-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
}

.setting-item label {
    font-weight: 600;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */
.inventory-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.inventory-stats {
    display: flex;
    gap: 20px;
    font-weight: bold;
}

.inventory-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 30px;
}

.inventory-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 15px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    transition: all 0.3s ease;
}

.inventory-item.active {
    border-color: rgba(86, 171, 47, 0.5);
    background: rgba(86, 171, 47, 0.1);
}

.inventory-item:hover {
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateY(-2px);
}

.item-icon {
    font-size: 1.5em;
}

.item-info {
    flex: 1;
}

.item-name {
    font-weight: bold;
    margin-bottom: 2px;
}

.item-description {
    font-size: 0.8em;
    opacity: 0.8;
}

.empty-inventory {
    grid-column: 1 / -1;
    text-align: center;
    padding: 40px 20px;
    opacity: 0.7;
}

.empty-icon {
    font-size: 3em;
    margin-bottom: 10px;
    opacity: 0.5;
}

.empty-hint {
    font-size: 0.9em;
    margin-top: 5px;
}

.inventory-shop {
    border-top: 2px solid rgba(255, 255, 255, 0.1);
    padding-top: 20px;
}

.shop-items {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 15px;
}

.shop-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.shop-item:hover {
    border-color: rgba(255, 217, 61, 0.5);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤ */
.skills-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.skills-progress {
    display: flex;
    gap: 15px;
    font-size: 0.9em;
    opacity: 0.8;
}

.skills-tree {
    display: flex;
    flex-direction: column;
    gap: 25px;
}

.skill-category h4 {
    margin-bottom: 15px;
    color: #ffd93d;
    font-family: 'Orbitron', sans-serif;
}

.skill-item {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    margin-bottom: 10px;
    transition: all 0.3s ease;
}

.skill-item.unlocked {
    border-color: rgba(86, 171, 47, 0.3);
}

.skill-item.locked {
    opacity: 0.6;
    filter: grayscale(0.8);
}

.skill-item:hover {
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateX(5px);
}

.skill-icon {
    font-size: 1.5em;
    width: 40px;
    text-align: center;
}

.skill-info {
    flex: 1;
}

.skill-name {
    font-weight: bold;
    margin-bottom: 2px;
}

.skill-description {
    font-size: 0.8em;
    opacity: 0.8;
}

.skill-level {
    font-size: 0.8em;
    opacity: 0.7;
    min-width: 60px;
    text-align: center;
}

.skill-max {
    font-size: 0.7em;
    color: #56ab2f;
    font-weight: bold;
    min-width: 60px;
    text-align: center;
}

.upgrade-btn {
    font-size: 0.8em;
    padding: 5px 10px;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
@media (max-width: 768px) {
    .inventory-grid {
        grid-template-columns: 1fr;
    }
    
    .skills-header {
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }
    
    .menu-item {
        padding: 12px;
    }
    
    .skill-item {
        flex-wrap: wrap;
    }
    
    .game-header {
        flex-direction: column;
        gap: 15px;
    }
    
    .header-left, .header-center, .header-right {
        width: 100%;
        justify-content: center;
    }
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const enhancedStyleSheet = document.createElement('style');
enhancedStyleSheet.textContent = enhancedStyles;
document.head.appendChild(enhancedStyleSheet);
