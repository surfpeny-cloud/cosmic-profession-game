// –°–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã
class MultiplayerSystem {
    constructor() {
        this.socket = null;
        this.sessionId = null;
        this.players = new Map();
        this.currentSession = null;
        this.isHost = false;
        this.connectionStatus = 'disconnected';
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadMultiplayerTemplates();
    }

    setupEventListeners() {
        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-mptab]')) {
                const tab = e.target.closest('[data-mptab]').dataset.mptab;
                this.switchMultiplayerTab(tab);
            }

            if (e.target.closest('.create-session-btn')) {
                this.createSession();
            }

            if (e.target.closest('.join-session-btn')) {
                const sessionId = e.target.closest('.join-session-btn').dataset.session;
                this.joinSession(sessionId);
            }
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–µ—Å—Å–∏–∏
    async createSession() {
        const sessionData = {
            sessionId: this.generateSessionId(),
            host: window.game?.player?.telegramId || 'local_player',
            hostName: window.game?.player?.name || '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
            maxPlayers: 4,
            currentPlayers: 1,
            status: 'waiting',
            gameMode: 'cooperative', // cooperative, competitive, creative
            created: new Date().toISOString(),
            settings: {
                planets: 15,
                timeLimit: 3600, // 1 —á–∞—Å
                allowHelpers: true
            }
        };

        this.currentSession = sessionData;
        this.isHost = true;
        this.sessionId = sessionData.sessionId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (window.gameDatabase) {
            await window.gameDatabase.createMultiplayerSession(sessionData);
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ "—Å–µ—Ä–≤–µ—Ä—É" (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ WebRTC –∏–ª–∏ WebSocket)
        this.connectToSession(sessionData.sessionId);

        this.updateMultiplayerUI();
        this.showNotification(`–°–µ—Å—Å–∏—è ${sessionData.sessionId} —Å–æ–∑–¥–∞–Ω–∞!`, 'success');
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
    async joinSession(sessionId) {
        this.sessionId = sessionId;
        this.isHost = false;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const session = await this.loadSession(sessionId);
        if (!session) {
            this.showNotification('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', 'error');
            return;
        }

        if (session.status !== 'waiting') {
            this.showNotification('–°–µ—Å—Å–∏—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!', 'error');
            return;
        }

        if (session.currentPlayers >= session.maxPlayers) {
            this.showNotification('–°–µ—Å—Å–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', 'error');
            return;
        }

        this.currentSession = session;
        this.connectToSession(sessionId);

        this.updateMultiplayerUI();
        this.showNotification(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏ ${sessionId}`, 'success');
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ)
    connectToSession(sessionId) {
        this.connectionStatus = 'connecting';
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            this.connectionStatus = 'connected';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–µ–º–æ
            this.addDemoPlayers();
            
            this.updateMultiplayerUI();
            this.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
        }, 2000);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–∏–≥—Ä–æ–∫–æ–≤
    addDemoPlayers() {
        const demoPlayers = [
            {
                id: 'demo1',
                name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                profession: '–ó–≤–µ–∑–¥–Ω—ã–π –ë–∏–æ–ª–æ–≥-–≠–∫–æ–ª–æ–≥',
                avatar: 'üë®‚ÄçüöÄ',
                ready: true,
                position: 0,
                stars: 5
            },
            {
                id: 'demo2', 
                name: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –•—É–¥–æ–∂–Ω–∏–∫',
                profession: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –î–∏–∑–∞–π–Ω–µ—Ä-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä',
                avatar: 'üë©‚Äçüé®',
                ready: false,
                position: 2,
                stars: 3
            }
        ];

        demoPlayers.forEach(player => {
            this.players.set(player.id, player);
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    async loadSession(sessionId) {
        return {
            sessionId: sessionId,
            host: 'demo_host',
            hostName: '–î–µ–º–æ –•–æ—Å—Ç',
            maxPlayers: 4,
            currentPlayers: 2,
            status: 'waiting',
            gameMode: 'cooperative',
            created: new Date().toISOString()
        };
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    switchMultiplayerTab(tab) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.mp-tab').forEach(t => t.classList.remove('active'));
        document.querySelector(`[data-mptab="${tab}"]`).classList.add('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.updateMultiplayerContent(tab);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    updateMultiplayerContent(tab) {
        const content = document.querySelector('.multiplayer-content');
        if (!content) return;

        switch (tab) {
            case 'lobby':
                content.innerHTML = this.generateLobbyHTML();
                break;
            case 'guilds':
                content.innerHTML = this.generateGuildsHTML();
                break;
            case 'leaderboard':
                content.innerHTML = this.generateLeaderboardHTML();
                break;
            case 'challenges':
                content.innerHTML = this.generateChallengesHTML();
                break;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ª–æ–±–±–∏
    generateLobbyHTML() {
        if (!this.currentSession) {
            return `
                <div class="no-session">
                    <div class="no-session-icon">üë•</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π</p>
                    <button class="btn btn-primary create-session-btn">
                        üöÄ –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
                    </button>
                    <div class="available-sessions">
                        <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</h4>
                        <div class="session-list">
                            ${this.generateSessionList()}
                        </div>
                    </div>
                </div>
            `;
        }

        return `
            <div class="active-session">
                <div class="session-header">
                    <h3>–°–µ—Å—Å–∏—è: ${this.currentSession.sessionId}</h3>
                    <div class="session-status ${this.currentSession.status}">
                        ${this.getStatusText(this.currentSession.status)}
                    </div>
                </div>

                <div class="players-list">
                    <h4>–ò–≥—Ä–æ–∫–∏ (${this.players.size}/${this.currentSession.maxPlayers})</h4>
                    ${Array.from(this.players.values()).map(player => `
                        <div class="player-slot ${player.ready ? 'ready' : ''}">
                            <div class="player-avatar">${player.avatar}</div>
                            <div class="player-info">
                                <div class="player-name">${player.name}</div>
                                <div class="player-profession">${player.profession}</div>
                            </div>
                            <div class="player-stats">
                                <span>‚≠ê ${player.stars}</span>
                                <span>ü™ê ${player.position}</span>
                            </div>
                            <div class="player-status">
                                ${player.ready ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'}
                            </div>
                        </div>
                    `).join('')}
                </div>

                <div class="session-controls">
                    ${this.isHost ? `
                        <button class="btn btn-success start-session-btn">
                            üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                        </button>
                        <button class="btn btn-secondary settings-btn">
                            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                    ` : `
                        <button class="btn ${this.isReady ? 'btn-secondary' : 'btn-primary'} ready-btn">
                            ${this.isReady ? '‚ùå –ù–µ –≥–æ—Ç–æ–≤' : '‚úÖ –ì–æ—Ç–æ–≤'}
                        </button>
                    `}
                    <button class="btn btn-danger leave-btn">
                        üö™ –ü–æ–∫–∏–Ω—É—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
    generateSessionList() {
        const demo
{
                id: 'COSMIC123',
                hostName: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                players: 2,
                maxPlayers: 4,
                mode: 'cooperative',
                status: 'waiting'
            },
            {
                id: 'GALAXY456',
                hostName: '–ó–≤–µ–∑–¥–Ω—ã–π –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', 
                players: 3,
                maxPlayers: 4,
                mode: 'competitive',
                status: 'waiting'
            },
            {
                id: 'NEBULA789',
                hostName: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –£—á–µ–Ω—ã–π',
                players: 1,
                maxPlayers: 3,
                mode: 'creative',
                status: 'waiting'
            }
        ];

        return demo Sessions.map(session => `
            <div class="session-item">
                <div class="session-info">
                    <div class="session-id">${session.id}</div>
                    <div class="session-host">–•–æ—Å—Ç: ${session.hostName}</div>
                    <div class="session-mode">–†–µ–∂–∏–º: ${this.getModeText(session.mode)}</div>
                </div>
                <div class="session-players">
                    üë• ${session.players}/${session.maxPlayers}
                </div>
                <button class="btn btn-primary join-session-btn" data-session="${session.id}">
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                </button>
            </div>
        `).join('');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –≥–∏–ª—å–¥–∏–π
    generateGuildsHTML() {
        return `
            <div class="guilds-container">
                <div class="guilds-header">
                    <h3>üåå –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ì–∏–ª—å–¥–∏–∏</h3>
                    <button class="btn btn-primary create-guild-btn">
                        üè∞ –°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é
                    </button>
                </div>

                <div class="guilds-list">
                    <div class="guild-card">
                        <div class="guild-icon">üöÄ</div>
                        <div class="guild-info">
                            <div class="guild-name">–ó–≤–µ–∑–¥–Ω—ã–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏</div>
                            <div class="guild-description">–ò—Å—Å–ª–µ–¥—É–µ–º —Å–∞–º—ã–µ –¥–∞–ª–µ–∫–∏–µ —É–≥–æ–ª–∫–∏ –≥–∞–ª–∞–∫—Ç–∏–∫–∏</div>
                            <div class="guild-stats">
                                <span>üë• 15 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                                <span>‚≠ê 245 –∑–≤–µ–∑–¥</span>
                                <span>üèÜ 12 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</span>
                            </div>
                        </div>
                        <button class="btn btn-primary join-guild-btn">
                            –í—Å—Ç—É–ø–∏—Ç—å
                        </button>
                    </div>

                    <div class="guild-card">
                        <div class="guild-icon">üé®</div>
                        <div class="guild-info">
                            <div class="guild-name">–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¢–≤–æ—Ä—Ü—ã</div>
                            <div class="guild-description">–°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–æ—Ç—É –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π</div>
                            <div class="guild-stats">
                                <span>üë• 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                                <span>‚≠ê 180 –∑–≤–µ–∑–¥</span>
                                <span>üèÜ 8 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</span>
                            </div>
                        </div>
                        <button class="btn btn-primary join-guild-btn">
                            –í—Å—Ç—É–ø–∏—Ç—å
                        </button>
                    </div>

                    <div class="guild-card">
                        <div class="guild-icon">üî¨</div>
                        <div class="guild-info">
                            <div class="guild-name">–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –£—á–µ–Ω—ã–µ</div>
                            <div class="guild-description">–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π</div>
                            <div class="guild-stats">
                                <span>üë• 22 —É—á–∞—Å—Ç–Ω–∏–∫–∞</span>
                                <span>‚≠ê 310 –∑–≤–µ–∑–¥</span>
                                <span>üèÜ 18 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</span>
                            </div>
                        </div>
                        <button class="btn btn-primary join-guild-btn">
                            –í—Å—Ç—É–ø–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    generateLeaderboardHTML() {
        const demo Leaders = [
            { name: '–ö–æ—Å–º–æ–Ω–∞–≤—Ç –ê–ª–µ–∫—Å', stars: 156, professions: 8, level: 5 },
            { name: '–ó–≤–µ–∑–¥–Ω–∞—è –ú–∞—Ä–∏—è', stars: 142, professions: 7, level: 5 },
            { name: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ú–∞–∫—Å', stars: 128, professions: 6, level: 4 },
            { name: '–û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è –ê–Ω–Ω–∞', stars: 115, professions: 5, level: 4 },
            { name: '–ö–æ–º–µ—Ç–Ω—ã–π –ò–≤–∞–Ω', stars: 98, professions: 4, level: 3 }
        ];

        return `
            <div class="leaderboard-container">
                <div class="leaderboard-header">
                    <h3>üèÜ –†–µ–π—Ç–∏–Ω–≥ –ò–≥—Ä–æ–∫–æ–≤</h3>
                    <div class="leaderboard-filters">
                        <button class="filter-btn active" data-filter="stars">–ü–æ –∑–≤–µ–∑–¥–∞–º</button>
                        <button class="filter-btn" data-filter="professions">–ü–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º</button>
                        <button class="filter-btn" data-filter="level">–ü–æ —É—Ä–æ–≤–Ω—é</button>
                    </div>
                </div>

                <div class="leaderboard-list">
                    ${demo Leaders.map((player, index) => `
                        <div class="leaderboard-item ${index < 3 ? 'top-three' : ''}">
                            <div class="rank">${index + 1}</div>
                            <div class="player-avatar">${this.getRankIcon(index + 1)}</div>
                            <div class="player-info">
                                <div class="player-name">${player.name}</div>
                                <div class="player-stats">
                                    <span>‚≠ê ${player.stars}</span>
                                    <span>üéì ${player.professions}</span>
                                    <span>üìà –£—Ä. ${player.level}</span>
                                </div>
                            </div>
                            <div class="player-badges">
                                ${index === 0 ? 'üëë' : ''}
                                ${player.stars > 100 ? 'üí´' : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>

                <div class="my-rank">
                    <h4>–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</h4>
                    <div class="leaderboard-item my-rank-item">
                        <div class="rank">27</div>
                        <div class="player-avatar">üë®‚ÄçüöÄ</div>
                        <div class="player-info">
                            <div class="player-name">${window.game?.player?.name || '–í—ã'}</div>
                            <div class="player-stats">
                                <span>‚≠ê ${window.game?.gameState?.stars || 0}</span>
                                <span>üéì 1</span>
                                <span>üìà –£—Ä. 1</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –≤—ã–∑–æ–≤–æ–≤
    generateChallengesHTML() {
        return `
            <div class="challenges-container">
                <div class="challenges-header">
                    <h3>üéØ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –í—ã–∑–æ–≤—ã</h3>
                    <p>–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö!</p>
                </div>

                <div class="challenges-list">
                    <div class="challenge-card">
                        <div class="challenge-icon">‚ö°</div>
                        <div class="challenge-info">
                            <div class="challenge-name">–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ</div>
                            <div class="challenge-description">–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</div>
                            <div class="challenge-stats">
                                <span>‚è±Ô∏è 3 –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å</span>
                                <span>üë• 45 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                            </div>
                        </div>
                        <button class="btn btn-primary join-challenge-btn">
                            –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                        </button>
                    </div>

                    <div class="challenge-card">
                        <div class="challenge-icon">üíé</div>
                        <div class="challenge-info">
                            <div class="challenge-name">–°–±–æ—Ä—â–∏–∫ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</div>
                            <div class="challenge-description">–°–æ–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤</div>
                            <div class="challenge-stats">
                                <span>‚è±Ô∏è 5 –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å</span>
                                <span>üë• 32 —É—á–∞—Å—Ç–Ω–∏–∫–∞</span>
                            </div>
                        </div>
                        <button class="btn btn-primary join-challenge-btn">
                            –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                        </button>
                    </div>

                    <div class="challenge-card">
                        <div class="challenge-icon">üé®</div>
                        <div class="challenge-info">
                            <div class="challenge-name">–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</div>
                            <div class="challenge-description">–°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º—É—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –±—É–¥—É—â–µ–≥–æ</div>
                            <div class="challenge-stats">
                                <span>‚è±Ô∏è 7 –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å</span>
                                <span>üë• 28 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                            </div>
                        </div>
                        <button class="btn btn-primary join-challenge-btn">
                            –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    generateSessionId() {
        return 'COSMIC' + Math.random().toString(36).substr(2, 6).toUpperCase();
    }

    getStatusText(status) {
        const statuses = {
            'waiting': '–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤',
            'playing': '–ò–≥—Ä–∞ –∏–¥–µ—Ç',
            'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        return statuses[status] || status;
    }

    getModeText(mode) {
        const modes = {
            'cooperative': '–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤',
            'competitive': '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ', 
            'creative': '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π'
        };
        return modes[mode] || mode;
    }

    getRankIcon(rank) {
        if (rank === 1) return 'ü•á';
        if (rank === 2) return 'ü•à';
        if (rank === 3) return 'ü•â';
        return 'üë®‚ÄçüöÄ';
    }

    showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.GameUtils) {
            GameUtils.showNotification(message, type);
        } else {
            alert(message);
        }
    }

    updateMultiplayerUI() {
        this.updateMultiplayerContent('lobby');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
    syncGameState(gameState) {
        if (!this.currentSession || this.connectionStatus !== 'connected') return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
        const syncData = {
            type: 'game_state_sync',
            sessionId: this.sessionId,
            playerId: window.game?.player?.telegramId,
            gameState: gameState,
            timestamp: Date.now()
        };

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', syncData);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    handlePlayerMove(playerId, moveData) {
        console.log(`üé≤ –ò–≥—Ä–æ–∫ ${playerId} —Å–¥–µ–ª–∞–ª —Ö–æ–¥:`, moveData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ–¥–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.showNotification(`–ò–≥—Ä–æ–∫ ${this.players.get(playerId)?.name} —Å–¥–µ–ª–∞–ª —Ö–æ–¥!`, 'info');
    }

    // –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    startCooperativeMission(missionData) {
        if (!this.currentSession) return;

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        const readyPlayers = Array.from(this.players.values()).filter(p => p.ready);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        const cooperativeMission = {
            ...missionData,
            type: 'cooperative',
            players: readyPlayers,
            sharedProgress: 0,
            maxProgress: readyPlayers.length * 100
        };

        console.log('ü§ù –ó–∞–ø—É—Å–∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', cooperativeMission);
        return cooperativeMission;
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    endSession() {
        if (this.currentSession) {
            console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–µ—Å—Å–∏–∏:', this.sessionId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.saveSessionResults();
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.currentSession = null;
            this.sessionId = null;
            this.players.clear();
            this.isHost = false;
            this.connectionStatus = 'disconnected';
        }

        this.updateMultiplayerUI();
    }

    saveSessionResults() {
        const results = {
            sessionId: this.sessionId,
            players: Array.from(this.players.values()),
            endTime: new Date().toISOString(),
            duration: Date.now() - new Date(this.currentSession.created).getTime()
        };

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏:', results);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        localStorage.setItem(`session_${this.sessionId}`, JSON.stringify(results));
    }
}

// –°—Ç–∏–ª–∏ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
const multiplayerStyles = `
.multiplayer-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

.multiplayer-header {
    text-align: center;
    margin-bottom: 30px;
}

.multiplayer-tabs {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    padding-bottom: 10px;
}

.mp-tab {
    background: none;
    border: none;
    color: white;
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.mp-tab.active {
    background: rgba(102, 126, 234, 0.3);
    color: #ffd93d;
}

.mp-tab:hover {
    background: rgba(255, 255, 255, 0.1);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –ª–æ–±–±–∏ */
.no-session {
    text-align: center;
    padding: 40px 20px;
}

.no-session-icon {
    font-size: 4em;
    margin-bottom: 20px;
    opacity: 0.7;
}

.session-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
}

.session-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: rgba(255, 255, 255, 0.05);
    padding: 15px;
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.session-info {
    flex: 1;
}

.session-id {
    font-weight: bold;
    color: #ffd93d;
}

.session-host {
    font-size: 0.9em;
    opacity: 0.8;
}

.session-mode {
    font-size: 0.8em;
    opacity: 0.6;
}

.session-players {
    margin: 0 20px;
    font-weight: bold;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ */
.active-session {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 20px;
    border: 1px solid rgba(102, 126, 234, 0.3);
}

.session-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.session-status {
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 0.8em;
    font-weight: bold;
}

.session-status.waiting {
    background: rgba(255, 217, 61, 0.2);
    color: #ffd93d;
}

.session-status.playing {
    background: rgba(86, 171, 47, 0.2);
    color: #56ab2f;
}

.players-list {
    margin-bottom: 20px;
}

.player-slot {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    margin-bottom: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
}

.player-slot.ready {
    border-color: rgba(86, 171, 47, 0.5);
    background: rgba(86, 171, 47, 0.1);
}

.player-avatar {
    font-size: 1.5em;
}

.player-info {
    flex: 1;
}

.player-name {
    font-weight: bold;
    margin-bottom: 2px;
}

.player-profession {
    font-size: 0.8em;
    opacity: 0.8;
}

.player-stats {
    display: flex;
    gap: 10px;
    font-size: 0.8em;
}

.player-status {
    font-size: 0.8em;
    font-weight: bold;
}

.session-controls {
    display: flex;
    gap: 10px;
    justify-content: center;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–π */
.guilds-container {
    padding: 20px;
}

.guilds-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.guilds-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.guild-card {
    display: flex;
    align-items: center;
    gap: 15px;
    background: rgba(255, 255, 255, 0.05);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
}

.guild-card:hover {
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateY(-2px);
}

.guild-icon {
    font-size: 2.5em;
}

.guild-info {
    flex: 1;
}

.guild-name {
    font-weight: bold;
    font-size: 1.2em;
    margin-bottom: 5px;
    color: #ffd93d;
}

.guild-description {
    opacity: 0.8;
    margin-bottom: 10px;
}

.guild-stats {
    display: flex;
    gap: 15px;
    font-size: 0.8em;
    opacity: 0.7;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ */
.leaderboard-container {
    padding: 20px;
}

.leaderboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.leaderboard-filters {
    display: flex;
    gap: 10px;
}

.filter-btn {
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.8em;
}

.filter-btn.active {
    background: rgba(102, 126, 234, 0.5);
    color: #ffd93d;
}

.leaderboard-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 30px;
}

.leaderboard-item {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.leaderboard-item.top-three {
    background: linear-gradient(135deg, rgba(255, 217, 61, 0.1) 0%, rgba(255, 154, 61, 0.1) 100%);
    border-color: rgba(255, 217, 61, 0.3);
}

.rank {
    font-weight: bold;
    font-size: 1.2em;
    width: 30px;
    text-align: center;
}

.player-badges {
    margin-left: auto;
}

.my-rank {
    border-top: 2px solid rgba(255, 255, 255, 0.1);
    padding-top: 20px;
}

.my-rank-item {
    background: rgba(102, 126, 234, 0.1);
    border-color: rgba(102, 126, 234, 0.3);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ */
.challenges-container {
    padding: 20px;
}

.challenges-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.challenge-card {
    display: flex;
    align-items: center;
    gap: 15px;
    background: rgba(255, 255, 255, 0.05);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.challenge-icon {
    font-size: 2em;
}

.challenge-info {
    flex: 1;
}

.challenge-name {
    font-weight: bold;
    font-size: 1.1em;
    margin-bottom: 5px;
    color: #ffd93d;
}

.challenge-description {
    opacity: 0.8;
    margin-bottom: 10px;
}

.challenge-stats {
    display: flex;
    gap: 15px;
    font-size: 0.8em;
    opacity: 0.7;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const multiplayerStyleSheet = document.createElement('style');
multiplayerStyleSheet.textContent = multiplayerStyles;
document.head.appendChild(multiplayerStyleSheet);

window.multiplayerSystem = new MultiplayerSystem();
