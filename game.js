// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å
class CosmicProfessionGame {
    constructor() {
        this.currentScreen = 'loadingScreen';
        this.player = null;
        this.gameState = {
            currentPosition: -1, // –°—Ç–∞—Ä—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø–ª–∞–Ω–µ—Ç–æ–π
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null,
            currentMission: null
        };
        this.planets = [];
        this.isCreativeSolution = false;
        this.timerInterval = null;
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã...');
        this.initTelegram();
        this.createGamePlanets();
        this.bindEvents();
        this.startLoadingAnimation();
    }

    initTelegram() {
        if (window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
            console.log('üì± Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    createGamePlanets() {
        this.planets = GAME_DATA.planets;
        console.log(`ü™ê –°–æ–∑–¥–∞–Ω–æ ${this.planets.length} –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è`);
    }

    bindEvents() {
        console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        document.getElementById('generateProfession').addEventListener('click', () => {
            this.generatePlayerProfession();
        });

        document.getElementById('startGame').addEventListener('click', () => {
            this.startGame();
        });

        // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('rollDice').addEventListener('click', () => {
            this.rollDice();
        });

        // –ó–∞–¥–∞–Ω–∏—è
        document.getElementById('completeMission').addEventListener('click', () => {
            this.showSolutionInput(false);
        });

        document.getElementById('creativeSolution').addEventListener('click', () => {
            this.showSolutionInput(true);
        });

        document.getElementById('submitSolution').addEventListener('click', () => {
            this.completeMission();
        });

        document.getElementById('cancelSolution').addEventListener('click', () => {
            this.hideSolutionInput();
        });

        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        document.getElementById('clearLog').addEventListener('click', () => {
            this.clearLog();
        });

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        document.getElementById('restartGame').addEventListener('click', () => {
            this.restartGame();
        });

        // –ü–ª–∞–≤–∞—é—â–∏–µ labels
        const floatingInput = document.getElementById('playerName');
        if (floatingInput) {
            floatingInput.addEventListener('input', this.handleFloatingLabel.bind(this));
        }

        console.log('‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    handleFloatingLabel(event) {
        const input = event.target;
        const label = input.nextElementSibling;
        if (input.value.trim() !== '') {
            label.classList.add('filled');
        } else {
            label.classList.remove('filled');
        }
    }

    startLoadingAnimation() {
        let progress = 0;
        const progressFill = document.querySelector('.progress-fill');
        const progressText = document.querySelector('.progress-text');
        
        const interval = setInterval(() => {
            progress += 2;
            progressFill.style.width = `${progress}%`;
            progressText.textContent = `${progress}%`;
            
            if (progress >= 100) {
                clearInterval(interval);
                setTimeout(() => {
                    this.showScreen('characterScreen');
                }, 500);
            }
        }, 60);
    }

    generatePlayerProfession() {
        const name = document.getElementById('playerName').value.trim();
        const skill = document.getElementById('mainSkill').value;
        const interest = document.getElementById('interestArea').value;

        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { name, skill, interest });

        if (!name) {
            GameUtils.showNotification('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞!', 'error');
            return;
        }

        if (!skill) {
            GameUtils.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤—ã–∫!', 'error');
            return;
        }

        if (!interest) {
            GameUtils.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!', 'error');
            return;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const profession = GameUtils.generateProfession(skill, interest);
        
        this.player = {
            name: name,
            profession: profession,
            skill: skill,
            interest: interest
        };

        console.log('üéì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:', profession);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultDiv = document.getElementById('professionResult');
        document.getElementById('professionName').textContent = profession.fullName;
        document.getElementById('professionDescription').textContent = profession.description;
        document.getElementById('professionSkill').textContent = this.getSkillDisplayName(skill);
        document.getElementById('professionInterest').textContent = this.getInterestDisplayName(interest);
        
        resultDiv.style.display = 'block';
        resultDiv.style.animation = 'slideUp 0.5s ease-out';

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
        document.getElementById('startGame').disabled = false;

        GameUtils.showNotification(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è "${profession.fullName}" —Å–æ–∑–¥–∞–Ω–∞!`, 'success');
    }

    getSkillDisplayName(skill) {
        const names = {
            '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ': 'üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ',
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
            '–ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º': 'ü§ù –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å',
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è': 'üî≠ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞',
            '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ': '‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
            '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': 'üìä –°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'
        };
        return names[skill] || skill;
    }

    getInterestDisplayName(interest) {
        const names = {
            '–∂–∏–≤–æ—Ç–Ω—ã–µ': 'üêæ –õ—é–±–æ–≤—å –∫ –∂–∏–≤–æ—Ç–Ω—ã–º',
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'ü§ñ –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': 'üé≠ –¢—è–≥–∞ –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É',
            '–ø—Ä–∏—Ä–æ–¥–∞': 'üåø –°–≤—è–∑—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π',
            '–∫–æ—Å–º–æ—Å': 'üöÄ –°—Ç—Ä–∞—Å—Ç—å –∫ –∫–æ—Å–º–æ—Å—É',
            '–º—É–∑—ã–∫–∞': 'üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–æ—Å—Ç—å'
        };
        return names[interest] || interest;
    }

    startGame() {
        if (!this.player) {
            GameUtils.showNotification('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!', 'error');
            return;
        }

        console.log('üéÆ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –¥–ª—è:', this.player.name);
        
        this.gameState.startTime = new Date();
        this.gameState.currentPosition = -1; // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        this.updateGameDisplay();
        this.showScreen('gameScreen');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DOM
        setTimeout(() => {
            this.renderGameMap();
        }, 100);
        
        this.addLogMessage(`üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –°–¢–ê–†–¢! –ö–æ—Ä–∞–±–ª—å "${this.player.name}" –Ω–∞—á–∞–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –ü–ª–∞–Ω–µ—Ç–µ –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!`);
        this.addLogMessage(`üéØ –í–∞—à–∞ –º–∏—Å—Å–∏—è: —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º ${this.player.profession.fullName} –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π!`);
        this.addLogMessage(`‚≠ê –°–æ–±–µ—Ä–∏—Ç–µ 10 –∑–≤–µ–∑–¥ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏.`);
        
        GameUtils.showNotification('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞.', 'success');
    }

    renderGameMap() {
        const container = document.getElementById('planetsContainer');
        if (!container) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç planetsContainer –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        container.innerHTML = '';

        this.planets.forEach((planet, index) => {
            const planetElement = document.createElement('div');
            planetElement.className = `planet ${planet.type}`;
            planetElement.innerHTML = planet.icon;
            planetElement.title = `${planet.name}\n${planet.description}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
            if (this.gameState.visitedPlanets.includes(planet.id)) {
                planetElement.classList.add('visited');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã
            if (index === this.gameState.currentPosition) {
                planetElement.classList.add('current');
            }
            
            container.appendChild(planetElement);
        });

        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞, –ø–ª–∞–Ω–µ—Ç:', this.planets.length);
        this.updatePlayerPosition();
    }

    updatePlayerPosition() {
        const marker = document.getElementById('playerMarker');
        const planets = document.querySelectorAll('.planet');
        
        console.log('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:', this.gameState.currentPosition);
        
        if (this.gameState.currentPosition >= 0 && planets[this.gameState.currentPosition]) {
            const planetRect = planets[this.gameState.currentPosition].getBoundingClientRect();
            const containerRect = document.querySelector('.planets-container').getBoundingClientRect();
            
            const leftPosition = planetRect.left - containerRect.left + planetRect.width/2 - 20;
            const topPosition = planetRect.top - containerRect.top - 25;
            
            marker.style.left = `${leftPosition}px`;
            marker.style.top = `${topPosition}px`;
            
            console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { left: leftPosition, top: topPosition });
        } else {
            // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
            marker.style.left = '20px';
            marker.style.top = '50%';
            marker.style.transform = 'translateY(-50%)';
        }
    }

    rollDice() {
        const diceBtn = document.getElementById('rollDice');
        diceBtn.disabled = true;

        console.log('üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∫—É–±–∏–∫–∞...');

        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const diceResult = document.getElementById('diceResult');
        diceResult.textContent = 'üé≤';
        diceResult.style.animation = 'none';
        void diceResult.offsetWidth; // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        diceResult.style.animation = 'diceRoll 0.8s ease-out';

        setTimeout(() => {
            const roll = Math.floor(Math.random() * 6) + 1;
            diceResult.textContent = this.getDiceEmoji(roll);
            console.log('‚úÖ –í—ã–ø–∞–ª–æ:', roll);
            
            this.movePlayer(roll);
            
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
            setTimeout(() => {
                diceBtn.disabled = false;
            }, 1000);
            
        }, 800);
    }

    getDiceEmoji(number) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[number - 1] || 'üé≤';
    }

    movePlayer(steps) {
        this.addLogMessage(`üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞: –≤—ã–ø–∞–ª–æ ${steps}`);

        const newPosition = this.gameState.currentPosition + steps;
        const maxPosition = this.planets.length - 1;

        console.log(`üîÑ –î–≤–∏–∂–µ–Ω–∏–µ: —Å ${this.gameState.currentPosition} –Ω–∞ ${newPosition}`);

        if (newPosition > maxPosition) {
            this.gameState.currentPosition = maxPosition;
            this.addLogMessage('üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞!');
            this.reachFinalPlanet();
        } else {
            this.gameState.currentPosition = newPosition;
            this.arriveAtPlanet();
        }

        this.renderGameMap(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
        this.updateGameDisplay();
    }

    arriveAtPlanet() {
        const currentPlanet = this.planets[this.gameState.currentPosition];
        
        console.log('ü™ê –ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É:', currentPlanet);
        
        this.addLogMessage(`ü™ê –ü–†–ò–ë–´–¢–ò–ï –ù–ê –ü–õ–ê–ù–ï–¢–£: ${currentPlanet.name}`);
        this.addLogMessage(`üìñ ${currentPlanet.description}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–µ—Ç—É –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
        if (!this.gameState.visitedPlanets.includes(currentPlanet.id)) {
            this.gameState.visitedPlanets.push(currentPlanet.id);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–¥–∞–Ω–∏—è
        setTimeout(() => {
            this.showMissionScreen(currentPlanet);
        }, 1000);
    }

    showMissionScreen(planet) {
        const mission = GameUtils.generateMission(planet.type, this.player.profession);
        this.gameState.currentMission = mission;
        
        console.log('üìã –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞–Ω–∏—è:', mission);
        
        document.getElementById('missionPlanetIcon').textContent = planet.icon;
        document.getElementById('missionPlanetName').textContent = planet.name;
        document.getElementById('missionPlanetType').textContent = planet.description;
        
        document.getElementById('missionTypeBadge').textContent = mission.name;
        document.getElementById('missionTypeBadge').className = `mission-type-badge ${mission.color}`;
        
        document.getElementById('missionText').textContent = mission.text;
        document.getElementById('missionProfession').textContent = this.player.profession.fullName;

        // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById('missionTimer').textContent = GameUtils.formatTime(mission.time);
        document.getElementById('solutionInput').style.display = 'none';
        document.getElementById('solutionText').value = '';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –±—ã–ª
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        this.startMissionTimer(mission.time);
        this.showScreen('missionScreen');
        
        this.addLogMessage(`üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${mission.name}`);
    }

    startMissionTimer(seconds) {
        this.timerSeconds = seconds;
        const totalSeconds = seconds;
        const timerFill = document.getElementById('timerFill');
        
        this.timerInterval = setInterval(() => {
            this.timerSeconds--;
            document.getElementById('missionTimer').textContent = GameUtils.formatTime(this.timerSeconds);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if (timerFill) {
                const progress = (this.timerSeconds / totalSeconds) * 100;
                timerFill.style.width = `${progress}%`;
            }
            
            if (this.timerSeconds <= 0) {
                clearInterval(this.timerInterval);
                this.timeOutMission();
            }
        }, 1000);
    }

    timeOutMission() {
        this.addLogMessage('‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.');
        GameUtils.showNotification('–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.', 'error');
        this.showScreen('gameScreen');
    }

    showSolutionInput(isCreative = false) {
        this.isCreativeSolution = isCreative;
        const solutionInput = document.getElementById('solutionInput');
        const solutionType = document.getElementById('solutionType');
        
        solutionInput.style.display = 'block';
        solutionType.textContent = isCreative ? '‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ' : '‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ';
        
        if (isCreative) {
            this.addLogMessage('‚ú® –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è!');
            GameUtils.showNotification('–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!', 'success');
        }
    }

    hideSolutionInput() {
        document.getElementById('solutionInput').style.display = 'none';
        document.getElementById('solutionText').value = '';
    }

    completeMission() {
        const solution = document.getElementById('solutionText').value.trim();
        
        if (!solution) {
            GameUtils.showNotification('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ!', 'error');
            return;
        }

        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        const currentPlanet = this.planets[this.gameState.currentPosition];
        let starsEarned = 1;
        let message = '';

        if (this.isCreativeSolution) {
            starsEarned = 2;
            message = 'üéâ –ë–õ–ï–°–¢–Ø–©–ï! –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! +2 –∑–≤–µ–∑–¥—ã';
            this.addLogMessage('‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –≤—ã—Å—à—É—é –æ—Ü–µ–Ω–∫—É!');
        } else {
            message = '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +1 –∑–≤–µ–∑–¥–∞';
            this.addLogMessage('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ.');
        }

        // –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–∏–ø—ã –ø–ª–∞–Ω–µ—Ç
        if (currentPlanet.type === 'red') {
            starsEarned += 1;
            message += ' + üí¨ –±–æ–Ω—É—Å –∑–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
            this.addLogMessage('üí¨ –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!');
        }
        
        if (currentPlanet.type === 'green') {
            starsEarned += 1;
            message += ' + ü§ù –±–æ–Ω—É—Å –∑–∞ –ø–æ–º–æ—â—å';
            this.addLogMessage('ü§ù –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ!');
        }

        // –û—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∂–µ–ª—Ç—ã—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö
        if (currentPlanet.type === 'yellow' && this.gameState.currentMission.stars > 0) {
            starsEarned = this.gameState.currentMission.stars;
            message = `‚≠ê ${this.gameState.currentMission.effect}`;
        }

        this.gameState.stars += starsEarned;

        this.addLogMessage(message);
        this.addLogMessage(`üìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: ${this.gameState.stars}/10`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫–æ–ª—å—Ü–æ
        this.updateProgressRing();

        GameUtils.showNotification(`–ü–æ–ª—É—á–µ–Ω–æ ${starsEarned} ‚≠ê! –í—Å–µ–≥–æ: ${this.gameState.stars}/10`, 'success');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 1500);
        } else {
            setTimeout(() => this.showScreen('gameScreen'), 1000);
        }
    }

    updateProgressRing() {
        const progressCircle = document.getElementById('progressCircle');
        if (progressCircle) {
            const circumference = 125.6; // 2 * œÄ * r
            const progress = (this.gameState.stars / 10) * circumference;
            progressCircle.style.strokeDashoffset = circumference - progress;
        }
    }

    reachFinalPlanet() {
        this.addLogMessage('üéØ –í–´ –î–û–°–¢–ò–ì–õ–ò –§–ò–ù–ê–õ–¨–ù–û–ô –ü–õ–ê–ù–ï–¢–´!');
        
        if (this.gameState.stars >= 10) {
            setTimeout(() => this.showVictoryScreen(), 2000);
        } else {
            this.addLogMessage('‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–±–µ–¥—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è.');
            GameUtils.showNotification('–°–æ–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!', 'info');
        }
    }

    showVictoryScreen() {
        const timePlayed = Math.floor((new Date() - this.gameState.startTime) / 1000);
        const minutes = Math.floor(timePlayed / 60);
        const seconds = timePlayed % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        document.getElementById('victoryProfession').textContent = this.player.profession.fullName;
        document.getElementById('victoryStars').textContent = this.gameState.stars;
        document.getElementById('victoryTime').textContent = timeString;
        
        this.showScreen('victoryScreen');
        this.addLogMessage('üéâ –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –ü–û–ë–ï–î–ê! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ü–ª–∞–Ω–µ—Ç—ã –ü—Ä–æ—Ñ–µ—Å—Å–∏–π!');
        
        GameUtils.showNotification('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! –í—ã —Å—Ç–∞–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!', 'success');
    }

    updateGameDisplay() {
        if (this.player) {
            document.getElementById('currentPlayerName').textContent = this.player.name;
            document.getElementById('currentProfession').textContent = this.player.profession.fullName;
            document.getElementById('starsCount').textContent = this.gameState.stars;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫–æ–ª—å—Ü–æ
            this.updateProgressRing();
        }
    }

    addLogMessage(message) {
        const logContainer = document.getElementById('logMessages');
        if (!logContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'log-message';
        messageElement.textContent = message;
        
        logContainer.appendChild(messageElement);
        logContainer.scrollTop = logContainer.scrollHeight;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
        this.gameState.gameLog.push({
            time: new Date().toLocaleTimeString(),
            message: message
        });
        
        console.log('üìù –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω:', message);
    }

    clearLog() {
        const logContainer = document.getElementById('logMessages');
        if (logContainer) {
            logContainer.innerHTML = '';
            this.addLogMessage('üóëÔ∏è –ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!');
        }
    }

    showScreen(screenName) {
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenName);
        if (targetScreen) {
            targetScreen.classList.add('active');
            this.currentScreen = screenName;
            console.log('‚úÖ –≠–∫—Ä–∞–Ω –ø–æ–∫–∞–∑–∞–Ω:', screenName);
        } else {
            console.error('‚ùå –≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenName);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        if (screenName === 'gameScreen') {
            setTimeout(() => {
                this.updatePlayerPosition();
            }, 200);
        }
    }

    restartGame() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
        
        this.player = null;
        this.gameState = {
            currentPosition: -1,
            stars: 0,
            visitedPlanets: [],
            gameLog: [],
            startTime: null,
            currentMission: null
        };

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('playerName').value = '';
        document.getElementById('mainSkill').value = '';
        document.getElementById('interestArea').value = '';
        
        const resultDiv = document.getElementById('professionResult');
        if (resultDiv) {
            resultDiv.style.display = 'none';
        }
        
        document.getElementById('startGame').disabled = true;
        
        const logContainer = document.getElementById('logMessages');
        if (logContainer) {
            logContainer.innerHTML = '';
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }

        this.showScreen('characterScreen');
        GameUtils.showNotification('–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.', 'info');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã...');
    window.game = new CosmicProfessionGame();
});
